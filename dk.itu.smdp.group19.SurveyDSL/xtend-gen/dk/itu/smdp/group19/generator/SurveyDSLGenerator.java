/**
 * generated by Xtext
 */
package dk.itu.smdp.group19.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import surveymodel.And;
import surveymodel.Answer;
import surveymodel.AnswerRef;
import surveymodel.Dependency;
import surveymodel.FreetextAnswer;
import surveymodel.FreetextQuestion;
import surveymodel.MultiChoiceQuestion;
import surveymodel.Not;
import surveymodel.Or;
import surveymodel.Page;
import surveymodel.Question;
import surveymodel.QuestionPage;
import surveymodel.SingleChoiceQuestion;
import surveymodel.Survey;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class SurveyDSLGenerator implements IGenerator {
  public static CharSequence compileToXml(final Survey it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<Survey name=\"");
    String _title = it.getTitle();
    _builder.append(_title, "");
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<pages>");
    _builder.newLine();
    {
      EList<Page> _pages = it.getPages();
      for(final Page page : _pages) {
        _builder.append("\t\t");
        _builder.append("<");
        EClass _eClass = page.eClass();
        String _name = _eClass.getName();
        _builder.append(_name, "		");
        _builder.append(" name=\"");
        String _title_1 = page.getTitle();
        _builder.append(_title_1, "		");
        _builder.append("\" text=\"");
        String _text = page.getText();
        _builder.append(_text, "		");
        _builder.append("\">");
        _builder.newLineIfNotEmpty();
        {
          EClass _eClass_1 = page.eClass();
          String _name_1 = _eClass_1.getName();
          String _simpleName = QuestionPage.class.getSimpleName();
          boolean _equals = Objects.equal(_name_1, _simpleName);
          if (_equals) {
            _builder.append("\t\t");
            final QuestionPage questionPage = ((QuestionPage) page);
            _builder.newLineIfNotEmpty();
            {
              EList<Question> _questions = questionPage.getQuestions();
              for(final Question question : _questions) {
                _builder.append("\t\t");
                _builder.append("<");
                EClass _eClass_2 = question.eClass();
                String _name_2 = _eClass_2.getName();
                _builder.append(_name_2, "		");
                _builder.append(" name=\"");
                String _text_1 = question.getText();
                _builder.append(_text_1, "		");
                _builder.append("\" optional=\"");
                boolean _isOptional = question.isOptional();
                _builder.append(_isOptional, "		");
                _builder.append("\">");
                _builder.newLineIfNotEmpty();
                {
                  EClass _eClass_3 = question.eClass();
                  String _name_3 = _eClass_3.getName();
                  String _simpleName_1 = SingleChoiceQuestion.class.getSimpleName();
                  boolean _equals_1 = Objects.equal(_name_3, _simpleName_1);
                  if (_equals_1) {
                    _builder.append("\t\t");
                    final SingleChoiceQuestion singleQuestion = ((SingleChoiceQuestion) question);
                    _builder.newLineIfNotEmpty();
                    {
                      EList<Answer> _answers = singleQuestion.getAnswers();
                      for(final Answer answer : _answers) {
                        _builder.append("\t\t");
                        _builder.append("<");
                        EClass _eClass_4 = answer.eClass();
                        String _name_4 = _eClass_4.getName();
                        _builder.append(_name_4, "		");
                        _builder.append(" name=\"");
                        String _name_5 = answer.getName();
                        _builder.append(_name_5, "		");
                        _builder.append("\" text=\"");
                        String _text_2 = answer.getText();
                        _builder.append(_text_2, "		");
                        _builder.append("\"/>");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                  } else {
                    EClass _eClass_5 = question.eClass();
                    String _name_6 = _eClass_5.getName();
                    String _simpleName_2 = MultiChoiceQuestion.class.getSimpleName();
                    boolean _equals_2 = Objects.equal(_name_6, _simpleName_2);
                    if (_equals_2) {
                      _builder.append("\t\t");
                      final MultiChoiceQuestion multiQuestion = ((MultiChoiceQuestion) question);
                      _builder.newLineIfNotEmpty();
                      {
                        EList<Answer> _answers_1 = multiQuestion.getAnswers();
                        for(final Answer answer_1 : _answers_1) {
                          _builder.append("\t\t");
                          _builder.append("<");
                          EClass _eClass_6 = answer_1.eClass();
                          String _name_7 = _eClass_6.getName();
                          _builder.append(_name_7, "		");
                          _builder.append(" name=\"");
                          String _name_8 = answer_1.getName();
                          _builder.append(_name_8, "		");
                          _builder.append("\" text=\"");
                          String _text_3 = answer_1.getText();
                          _builder.append(_text_3, "		");
                          _builder.append("\"/>");
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    } else {
                      EClass _eClass_7 = question.eClass();
                      String _name_9 = _eClass_7.getName();
                      String _simpleName_3 = FreetextQuestion.class.getSimpleName();
                      boolean _equals_3 = Objects.equal(_name_9, _simpleName_3);
                      if (_equals_3) {
                        _builder.append("\t\t");
                        final FreetextQuestion freeQuestion = ((FreetextQuestion) question);
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t");
                        _builder.append("<");
                        FreetextAnswer _answers_2 = freeQuestion.getAnswers();
                        EClass _eClass_8 = _answers_2.eClass();
                        String _name_10 = _eClass_8.getName();
                        _builder.append(_name_10, "		");
                        _builder.append(" name=\"");
                        FreetextAnswer _answers_3 = freeQuestion.getAnswers();
                        String _name_11 = _answers_3.getName();
                        _builder.append(_name_11, "		");
                        _builder.append("\" text=\"");
                        FreetextAnswer _answers_4 = freeQuestion.getAnswers();
                        String _text_4 = _answers_4.getText();
                        _builder.append(_text_4, "		");
                        _builder.append("\"/>");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                  }
                }
                _builder.append("\t\t");
                _builder.newLine();
                {
                  Dependency _requires = question.getRequires();
                  boolean _notEquals = (!Objects.equal(_requires, null));
                  if (_notEquals) {
                    _builder.append("\t\t");
                    _builder.append("<Requires>");
                    _builder.newLine();
                    _builder.append("\t\t");
                    Dependency _requires_1 = question.getRequires();
                    String _compileDependencyToXml = SurveyDSLGenerator.compileDependencyToXml(_requires_1);
                    _builder.append(_compileDependencyToXml, "		");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t");
                    _builder.append("</Requires>");
                    _builder.newLine();
                  }
                }
                _builder.append("\t\t");
                _builder.append("</");
                EClass _eClass_9 = question.eClass();
                String _name_12 = _eClass_9.getName();
                _builder.append(_name_12, "		");
                _builder.append(">");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        _builder.append("\t\t");
        _builder.append("</");
        EClass _eClass_10 = page.eClass();
        String _name_13 = _eClass_10.getName();
        _builder.append(_name_13, "		");
        _builder.append(">");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("</pages>");
    _builder.newLine();
    _builder.append("</Survey>");
    _builder.newLine();
    return _builder;
  }
  
  public static String compileDependencyToXml(final Dependency it) {
    String _xblockexpression = null;
    {
      boolean _equals = Objects.equal(it, null);
      if (_equals) {
        return "";
      }
      StringConcatenation _builder = new StringConcatenation();
      {
        EClass _eClass = it.eClass();
        String _name = _eClass.getName();
        String _simpleName = Not.class.getSimpleName();
        boolean _equals_1 = Objects.equal(_name, _simpleName);
        if (_equals_1) {
          final Not not = ((Not) it);
          _builder.newLineIfNotEmpty();
          _builder.append("<Not>");
          _builder.newLine();
          Dependency _dependency = not.getDependency();
          String _compileDependencyToXml = SurveyDSLGenerator.compileDependencyToXml(_dependency);
          _builder.append(_compileDependencyToXml, "");
          _builder.newLineIfNotEmpty();
          _builder.append("</Not>");
          _builder.newLine();
        } else {
          EClass _eClass_1 = it.eClass();
          String _name_1 = _eClass_1.getName();
          String _simpleName_1 = And.class.getSimpleName();
          boolean _equals_2 = Objects.equal(_name_1, _simpleName_1);
          if (_equals_2) {
            final And and = ((And) it);
            _builder.newLineIfNotEmpty();
            _builder.append("<And>");
            _builder.newLine();
            Dependency _lhs = and.getLhs();
            String _compileDependencyToXml_1 = SurveyDSLGenerator.compileDependencyToXml(_lhs);
            _builder.append(_compileDependencyToXml_1, "");
            _builder.newLineIfNotEmpty();
            Dependency _rhs = and.getRhs();
            String _compileDependencyToXml_2 = SurveyDSLGenerator.compileDependencyToXml(_rhs);
            _builder.append(_compileDependencyToXml_2, "");
            _builder.newLineIfNotEmpty();
            _builder.append("</And>");
            _builder.newLine();
          } else {
            EClass _eClass_2 = it.eClass();
            String _name_2 = _eClass_2.getName();
            String _simpleName_2 = Or.class.getSimpleName();
            boolean _equals_3 = Objects.equal(_name_2, _simpleName_2);
            if (_equals_3) {
              final Or or = ((Or) it);
              _builder.newLineIfNotEmpty();
              _builder.append("<Or>");
              _builder.newLine();
              Dependency _lhs_1 = or.getLhs();
              String _compileDependencyToXml_3 = SurveyDSLGenerator.compileDependencyToXml(_lhs_1);
              _builder.append(_compileDependencyToXml_3, "");
              _builder.newLineIfNotEmpty();
              Dependency _rhs_1 = or.getRhs();
              String _compileDependencyToXml_4 = SurveyDSLGenerator.compileDependencyToXml(_rhs_1);
              _builder.append(_compileDependencyToXml_4, "");
              _builder.newLineIfNotEmpty();
              _builder.append("</Or>");
              _builder.newLine();
            } else {
              EClass _eClass_3 = it.eClass();
              String _name_3 = _eClass_3.getName();
              String _simpleName_3 = AnswerRef.class.getSimpleName();
              boolean _equals_4 = Objects.equal(_name_3, _simpleName_3);
              if (_equals_4) {
                final AnswerRef ref = ((AnswerRef) it);
                _builder.newLineIfNotEmpty();
                _builder.append("<AnswerRef name=\"");
                Answer _refers = ref.getRefers();
                String _name_4 = _refers.getName();
                _builder.append(_name_4, "");
                _builder.append("\" />");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
      _xblockexpression = (_builder.toString());
    }
    return _xblockexpression;
  }
  
  public static CharSequence compileToTex(final Survey it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\\documentclass[a4paper,final]{article}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\\usepackage{a4wide}");
    _builder.newLine();
    _builder.append("\\usepackage[english]{babel}");
    _builder.newLine();
    _builder.append("\\usepackage[utf8]{inputenc}");
    _builder.newLine();
    _builder.append("\\usepackage[T1]{fontenc}");
    _builder.newLine();
    _builder.append("\\usepackage{newtxtext,newtxmath}");
    _builder.newLine();
    _builder.append("\\usepackage{fancyhdr}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\\parindent = 0pt");
    _builder.newLine();
    _builder.append("\\setlength{\\headheight}{15pt}");
    _builder.newLine();
    _builder.append("\\pagestyle{fancy}");
    _builder.newLine();
    _builder.append("\\chead{");
    String _title = it.getTitle();
    _builder.append(_title, "");
    _builder.append("}");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\\begin{document}");
    _builder.newLine();
    _builder.newLine();
    {
      EList<Page> _pages = it.getPages();
      for(final Page page : _pages) {
        _builder.append("\\newpage");
        _builder.newLine();
        _builder.append("\\section*{");
        String _title_1 = page.getTitle();
        _builder.append(_title_1, "");
        _builder.append("}");
        _builder.newLineIfNotEmpty();
        String _text = page.getText();
        _builder.append(_text, "");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("\\vspace{15pt}");
        _builder.newLine();
        _builder.newLine();
        {
          EClass _eClass = page.eClass();
          String _name = _eClass.getName();
          String _simpleName = QuestionPage.class.getSimpleName();
          boolean _equals = Objects.equal(_name, _simpleName);
          if (_equals) {
            final QuestionPage questionPage = ((QuestionPage) page);
            _builder.newLineIfNotEmpty();
            {
              EList<Question> _questions = questionPage.getQuestions();
              for(final Question question : _questions) {
                String _text_1 = question.getText();
                _builder.append(_text_1, "");
                _builder.newLineIfNotEmpty();
                {
                  boolean _isOptional = question.isOptional();
                  if (_isOptional) {
                    _builder.append("(optional)");
                    _builder.newLine();
                  }
                }
                {
                  Dependency _requires = question.getRequires();
                  boolean _notEquals = (!Objects.equal(_requires, null));
                  if (_notEquals) {
                    _builder.append("(to answer this question, you must have answered ");
                    Dependency _requires_1 = question.getRequires();
                    String _compileDependencyToTex = SurveyDSLGenerator.compileDependencyToTex(_requires_1);
                    _builder.append(_compileDependencyToTex, "");
                    _builder.append(")");
                    _builder.newLineIfNotEmpty();
                  }
                }
                {
                  EClass _eClass_1 = question.eClass();
                  String _name_1 = _eClass_1.getName();
                  String _simpleName_1 = SingleChoiceQuestion.class.getSimpleName();
                  boolean _equals_1 = Objects.equal(_name_1, _simpleName_1);
                  if (_equals_1) {
                    _builder.append("\t");
                    _builder.append("(select one)");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\\begin{itemize}");
                    _builder.newLine();
                    _builder.append("\t");
                    final SingleChoiceQuestion singleQuestion = ((SingleChoiceQuestion) question);
                    _builder.newLineIfNotEmpty();
                    {
                      EList<Answer> _answers = singleQuestion.getAnswers();
                      for(final Answer answer : _answers) {
                        _builder.append("\t");
                        _builder.append("\\item[$\\bigcirc$] ");
                        String _text_2 = answer.getText();
                        _builder.append(_text_2, "	");
                        _builder.newLineIfNotEmpty();
                        {
                          EClass _eClass_2 = answer.eClass();
                          String _name_2 = _eClass_2.getName();
                          String _simpleName_2 = FreetextAnswer.class.getSimpleName();
                          boolean _equals_2 = Objects.equal(_name_2, _simpleName_2);
                          if (_equals_2) {
                            _builder.append("\t");
                            _builder.append("\\\\");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("\\fbox{");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("\\begin{minipage}{5in}");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("\t\t");
                            _builder.append("\\hfill \\vspace{1in}");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("\\end{minipage}");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("}");
                            _builder.newLine();
                          }
                        }
                      }
                    }
                    _builder.append("\t");
                    _builder.append("\\end{itemize}");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.newLine();
                  } else {
                    EClass _eClass_3 = question.eClass();
                    String _name_3 = _eClass_3.getName();
                    String _simpleName_3 = MultiChoiceQuestion.class.getSimpleName();
                    boolean _equals_3 = Objects.equal(_name_3, _simpleName_3);
                    if (_equals_3) {
                      _builder.append("\t");
                      _builder.append("(select one or several)");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("\\begin{itemize}");
                      _builder.newLine();
                      _builder.append("\t");
                      final MultiChoiceQuestion multiQuestion = ((MultiChoiceQuestion) question);
                      _builder.newLineIfNotEmpty();
                      {
                        EList<Answer> _answers_1 = multiQuestion.getAnswers();
                        for(final Answer answer_1 : _answers_1) {
                          _builder.append("\t");
                          _builder.append("\\item[$\\bigcirc$] ");
                          String _text_3 = answer_1.getText();
                          _builder.append(_text_3, "	");
                          _builder.newLineIfNotEmpty();
                        }
                      }
                      _builder.append("\t");
                      _builder.append("\\end{itemize}");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.newLine();
                    } else {
                      EClass _eClass_4 = question.eClass();
                      String _name_4 = _eClass_4.getName();
                      String _simpleName_4 = FreetextQuestion.class.getSimpleName();
                      boolean _equals_4 = Objects.equal(_name_4, _simpleName_4);
                      if (_equals_4) {
                        _builder.append("\t");
                        final FreetextQuestion freeQuestion = ((FreetextQuestion) question);
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t");
                        _builder.append("\\begin{itemize}");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("\\item[$\\bigcirc$] ");
                        FreetextAnswer _answers_2 = freeQuestion.getAnswers();
                        String _text_4 = _answers_2.getText();
                        _builder.append(_text_4, "	");
                        _builder.append("\\\\");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t");
                        _builder.append("\\fbox{");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("\\begin{minipage}{5in}");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("\\hfill \\vspace{3in}");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("\\end{minipage}");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("}");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("\\end{itemize}");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.newLine();
                      }
                    }
                  }
                }
                _builder.append("\t");
                _builder.append("\\vspace{15pt}");
                _builder.newLine();
                _builder.append("\t");
                _builder.newLine();
              }
            }
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("\\end{document}");
    _builder.newLine();
    return _builder;
  }
  
  public static String compileDependencyToTex(final Dependency it) {
    String _xblockexpression = null;
    {
      boolean _equals = Objects.equal(it, null);
      if (_equals) {
        return "";
      }
      StringConcatenation _builder = new StringConcatenation();
      {
        EClass _eClass = it.eClass();
        String _name = _eClass.getName();
        String _simpleName = Not.class.getSimpleName();
        boolean _equals_1 = Objects.equal(_name, _simpleName);
        if (_equals_1) {
          final Not not = ((Not) it);
          _builder.newLineIfNotEmpty();
          _builder.append("not ");
          Dependency _dependency = not.getDependency();
          String _compileDependencyToTex = SurveyDSLGenerator.compileDependencyToTex(_dependency);
          _builder.append(_compileDependencyToTex, "");
          _builder.newLineIfNotEmpty();
        } else {
          EClass _eClass_1 = it.eClass();
          String _name_1 = _eClass_1.getName();
          String _simpleName_1 = And.class.getSimpleName();
          boolean _equals_2 = Objects.equal(_name_1, _simpleName_1);
          if (_equals_2) {
            final And and = ((And) it);
            _builder.newLineIfNotEmpty();
            Dependency _lhs = and.getLhs();
            String _compileDependencyToTex_1 = SurveyDSLGenerator.compileDependencyToTex(_lhs);
            _builder.append(_compileDependencyToTex_1, "");
            _builder.append(" and ");
            Dependency _rhs = and.getRhs();
            String _compileDependencyToTex_2 = SurveyDSLGenerator.compileDependencyToTex(_rhs);
            _builder.append(_compileDependencyToTex_2, "");
            _builder.newLineIfNotEmpty();
          } else {
            EClass _eClass_2 = it.eClass();
            String _name_2 = _eClass_2.getName();
            String _simpleName_2 = Or.class.getSimpleName();
            boolean _equals_3 = Objects.equal(_name_2, _simpleName_2);
            if (_equals_3) {
              final Or or = ((Or) it);
              _builder.newLineIfNotEmpty();
              Dependency _lhs_1 = or.getLhs();
              String _compileDependencyToTex_3 = SurveyDSLGenerator.compileDependencyToTex(_lhs_1);
              _builder.append(_compileDependencyToTex_3, "");
              _builder.append(" or ");
              Dependency _rhs_1 = or.getRhs();
              String _compileDependencyToTex_4 = SurveyDSLGenerator.compileDependencyToTex(_rhs_1);
              _builder.append(_compileDependencyToTex_4, "");
              _builder.newLineIfNotEmpty();
            } else {
              EClass _eClass_3 = it.eClass();
              String _name_3 = _eClass_3.getName();
              String _simpleName_3 = AnswerRef.class.getSimpleName();
              boolean _equals_4 = Objects.equal(_name_3, _simpleName_3);
              if (_equals_4) {
                final AnswerRef ref = ((AnswerRef) it);
                _builder.newLineIfNotEmpty();
                Answer _refers = ref.getRefers();
                String _text = _refers.getText();
                _builder.append(_text, "");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
      _xblockexpression = (_builder.toString());
    }
    return _xblockexpression;
  }
  
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    try {
      TreeIterator<EObject> _allContents = resource.getAllContents();
      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
      Iterable<Survey> _filter = Iterables.<Survey>filter(_iterable, Survey.class);
      for (final Survey e : _filter) {
        {
          String _title = e.getTitle();
          String _string = _title.toString();
          String _plus = ("surveys/" + _string);
          String _plus_1 = (_plus + ".xml");
          CharSequence _compileToXml = SurveyDSLGenerator.compileToXml(e);
          fsa.generateFile(_plus_1, _compileToXml);
          String _title_1 = e.getTitle();
          String _string_1 = _title_1.toString();
          String _plus_2 = ("surveys/" + _string_1);
          final String texFile = (_plus_2 + ".tex");
          CharSequence _compileToTex = SurveyDSLGenerator.compileToTex(e);
          fsa.generateFile(texFile, _compileToTex);
          Runtime _runtime = Runtime.getRuntime();
          String _plus_3 = ("pdflatex " + texFile);
          _runtime.exec(_plus_3);
        }
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
