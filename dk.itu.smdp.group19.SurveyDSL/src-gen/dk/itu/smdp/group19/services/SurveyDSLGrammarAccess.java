/*
* generated by Xtext
*/
package dk.itu.smdp.group19.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SurveyDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SurveyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Survey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStartSurveyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTitleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTitleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTitleEStringParserRuleCall_2_0 = (RuleCall)cTitleAssignment_2.eContents().get(0);
		private final Keyword cPagesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPagesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPagesPageParserRuleCall_4_0 = (RuleCall)cPagesAssignment_4.eContents().get(0);
		private final Assignment cPagesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPagesPageParserRuleCall_5_0 = (RuleCall)cPagesAssignment_5.eContents().get(0);
		private final Keyword cEndSurveyKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Survey:
		//	"start survey" "title:" title=EString "pages:" pages+=Page pages+=Page* "end survey";
		public ParserRule getRule() { return rule; }

		//"start survey" "title:" title=EString "pages:" pages+=Page pages+=Page* "end survey"
		public Group getGroup() { return cGroup; }

		//"start survey"
		public Keyword getStartSurveyKeyword_0() { return cStartSurveyKeyword_0; }

		//"title:"
		public Keyword getTitleKeyword_1() { return cTitleKeyword_1; }

		//title=EString
		public Assignment getTitleAssignment_2() { return cTitleAssignment_2; }

		//EString
		public RuleCall getTitleEStringParserRuleCall_2_0() { return cTitleEStringParserRuleCall_2_0; }

		//"pages:"
		public Keyword getPagesKeyword_3() { return cPagesKeyword_3; }

		//pages+=Page
		public Assignment getPagesAssignment_4() { return cPagesAssignment_4; }

		//Page
		public RuleCall getPagesPageParserRuleCall_4_0() { return cPagesPageParserRuleCall_4_0; }

		//pages+=Page*
		public Assignment getPagesAssignment_5() { return cPagesAssignment_5; }

		//Page
		public RuleCall getPagesPageParserRuleCall_5_0() { return cPagesPageParserRuleCall_5_0; }

		//"end survey"
		public Keyword getEndSurveyKeyword_6() { return cEndSurveyKeyword_6; }
	}

	public class PageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Page");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cQuestionPageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDescriptionPageParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cResultPageParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Page:
		//	QuestionPage | DescriptionPage | ResultPage;
		public ParserRule getRule() { return rule; }

		//QuestionPage | DescriptionPage | ResultPage
		public Alternatives getAlternatives() { return cAlternatives; }

		//QuestionPage
		public RuleCall getQuestionPageParserRuleCall_0() { return cQuestionPageParserRuleCall_0; }

		//DescriptionPage
		public RuleCall getDescriptionPageParserRuleCall_1() { return cDescriptionPageParserRuleCall_1; }

		//ResultPage
		public RuleCall getResultPageParserRuleCall_2() { return cResultPageParserRuleCall_2; }
	}

	public class QuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Question");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFreetextQuestionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSingleChoiceQuestionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMultiChoiceQuestionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Question:
		//	FreetextQuestion | SingleChoiceQuestion | MultiChoiceQuestion;
		public ParserRule getRule() { return rule; }

		//FreetextQuestion | SingleChoiceQuestion | MultiChoiceQuestion
		public Alternatives getAlternatives() { return cAlternatives; }

		//FreetextQuestion
		public RuleCall getFreetextQuestionParserRuleCall_0() { return cFreetextQuestionParserRuleCall_0; }

		//SingleChoiceQuestion
		public RuleCall getSingleChoiceQuestionParserRuleCall_1() { return cSingleChoiceQuestionParserRuleCall_1; }

		//MultiChoiceQuestion
		public RuleCall getMultiChoiceQuestionParserRuleCall_2() { return cMultiChoiceQuestionParserRuleCall_2; }
	}

	public class DependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dependency");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOrParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAnswerRefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Dependency:
		//	And | Or | AnswerRef;
		public ParserRule getRule() { return rule; }

		//And | Or | AnswerRef
		public Alternatives getAlternatives() { return cAlternatives; }

		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }

		//Or
		public RuleCall getOrParserRuleCall_1() { return cOrParserRuleCall_1; }

		//AnswerRef
		public RuleCall getAnswerRefParserRuleCall_2() { return cAnswerRefParserRuleCall_2; }
	}

	public class AnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Answer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cChoiceAnswerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFreetextAnswerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Answer:
		//	ChoiceAnswer | FreetextAnswer;
		public ParserRule getRule() { return rule; }

		//ChoiceAnswer | FreetextAnswer
		public Alternatives getAlternatives() { return cAlternatives; }

		//ChoiceAnswer
		public RuleCall getChoiceAnswerParserRuleCall_0() { return cChoiceAnswerParserRuleCall_0; }

		//FreetextAnswer
		public RuleCall getFreetextAnswerParserRuleCall_1() { return cFreetextAnswerParserRuleCall_1; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class QuestionPageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QuestionPage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddQuestionPageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTitleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTitleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTitleEStringParserRuleCall_2_0 = (RuleCall)cTitleAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTextKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTextAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTextEStringParserRuleCall_3_1_0 = (RuleCall)cTextAssignment_3_1.eContents().get(0);
		private final Keyword cQuestionsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cQuestionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cQuestionsQuestionParserRuleCall_5_0 = (RuleCall)cQuestionsAssignment_5.eContents().get(0);
		private final Assignment cQuestionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cQuestionsQuestionParserRuleCall_6_0 = (RuleCall)cQuestionsAssignment_6.eContents().get(0);
		private final Keyword cEndPageKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		////Page_Impl returns Page:
		////	'Page'
		////	'{'
		////		'title' title=EString
		////		('text' text=EString)?
		////	'}';
		//QuestionPage:
		//	"add question page" "title:" title=EString ("text:" text=EString)? "questions:" questions+=Question
		//	questions+=Question* "end page";
		public ParserRule getRule() { return rule; }

		//"add question page" "title:" title=EString ("text:" text=EString)? "questions:" questions+=Question questions+=Question*
		//"end page"
		public Group getGroup() { return cGroup; }

		//"add question page"
		public Keyword getAddQuestionPageKeyword_0() { return cAddQuestionPageKeyword_0; }

		//"title:"
		public Keyword getTitleKeyword_1() { return cTitleKeyword_1; }

		//title=EString
		public Assignment getTitleAssignment_2() { return cTitleAssignment_2; }

		//EString
		public RuleCall getTitleEStringParserRuleCall_2_0() { return cTitleEStringParserRuleCall_2_0; }

		//("text:" text=EString)?
		public Group getGroup_3() { return cGroup_3; }

		//"text:"
		public Keyword getTextKeyword_3_0() { return cTextKeyword_3_0; }

		//text=EString
		public Assignment getTextAssignment_3_1() { return cTextAssignment_3_1; }

		//EString
		public RuleCall getTextEStringParserRuleCall_3_1_0() { return cTextEStringParserRuleCall_3_1_0; }

		//"questions:"
		public Keyword getQuestionsKeyword_4() { return cQuestionsKeyword_4; }

		//questions+=Question
		public Assignment getQuestionsAssignment_5() { return cQuestionsAssignment_5; }

		//Question
		public RuleCall getQuestionsQuestionParserRuleCall_5_0() { return cQuestionsQuestionParserRuleCall_5_0; }

		//questions+=Question*
		public Assignment getQuestionsAssignment_6() { return cQuestionsAssignment_6; }

		//Question
		public RuleCall getQuestionsQuestionParserRuleCall_6_0() { return cQuestionsQuestionParserRuleCall_6_0; }

		//"end page"
		public Keyword getEndPageKeyword_7() { return cEndPageKeyword_7; }
	}

	public class DescriptionPageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DescriptionPage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddDescriptionPageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTitleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTitleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTitleEStringParserRuleCall_2_0 = (RuleCall)cTitleAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTextKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTextAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTextEStringParserRuleCall_3_1_0 = (RuleCall)cTextAssignment_3_1.eContents().get(0);
		private final Keyword cEndPageKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DescriptionPage:
		//	"add description page" "title:" title=EString ("text:" text=EString)? "end page";
		public ParserRule getRule() { return rule; }

		//"add description page" "title:" title=EString ("text:" text=EString)? "end page"
		public Group getGroup() { return cGroup; }

		//"add description page"
		public Keyword getAddDescriptionPageKeyword_0() { return cAddDescriptionPageKeyword_0; }

		//"title:"
		public Keyword getTitleKeyword_1() { return cTitleKeyword_1; }

		//title=EString
		public Assignment getTitleAssignment_2() { return cTitleAssignment_2; }

		//EString
		public RuleCall getTitleEStringParserRuleCall_2_0() { return cTitleEStringParserRuleCall_2_0; }

		//("text:" text=EString)?
		public Group getGroup_3() { return cGroup_3; }

		//"text:"
		public Keyword getTextKeyword_3_0() { return cTextKeyword_3_0; }

		//text=EString
		public Assignment getTextAssignment_3_1() { return cTextAssignment_3_1; }

		//EString
		public RuleCall getTextEStringParserRuleCall_3_1_0() { return cTextEStringParserRuleCall_3_1_0; }

		//"end page"
		public Keyword getEndPageKeyword_4() { return cEndPageKeyword_4; }
	}

	public class ResultPageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResultPage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddResultPageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTitleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTitleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTitleEStringParserRuleCall_2_0 = (RuleCall)cTitleAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTextKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTextAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTextEStringParserRuleCall_3_1_0 = (RuleCall)cTextAssignment_3_1.eContents().get(0);
		private final Keyword cEndPageKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ResultPage:
		//	"add result page" "title:" title=EString ("text:" text=EString)? "end page";
		public ParserRule getRule() { return rule; }

		//"add result page" "title:" title=EString ("text:" text=EString)? "end page"
		public Group getGroup() { return cGroup; }

		//"add result page"
		public Keyword getAddResultPageKeyword_0() { return cAddResultPageKeyword_0; }

		//"title:"
		public Keyword getTitleKeyword_1() { return cTitleKeyword_1; }

		//title=EString
		public Assignment getTitleAssignment_2() { return cTitleAssignment_2; }

		//EString
		public RuleCall getTitleEStringParserRuleCall_2_0() { return cTitleEStringParserRuleCall_2_0; }

		//("text:" text=EString)?
		public Group getGroup_3() { return cGroup_3; }

		//"text:"
		public Keyword getTextKeyword_3_0() { return cTextKeyword_3_0; }

		//text=EString
		public Assignment getTextAssignment_3_1() { return cTextAssignment_3_1; }

		//EString
		public RuleCall getTextEStringParserRuleCall_3_1_0() { return cTextEStringParserRuleCall_3_1_0; }

		//"end page"
		public Keyword getEndPageKeyword_4() { return cEndPageKeyword_4; }
	}

	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		////Question_Impl returns Question:
		////	optional?='optional'
		////	'Question'
		////	'{'
		////	'text' text=EString
		////	('requires' requires=Dependency)?
		////	'}';
		//EBoolean returns ecore::EBoolean:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class FreetextQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FreetextQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddFreeTextQuestionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOptionalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cOptionalOptionalKeyword_1_0 = (Keyword)cOptionalAssignment_1.eContents().get(0);
		private final Keyword cTextKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTextAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTextEStringParserRuleCall_3_0 = (RuleCall)cTextAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cRequiresKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRequiresAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRequiresDependencyParserRuleCall_4_1_0 = (RuleCall)cRequiresAssignment_4_1.eContents().get(0);
		private final Keyword cAnswersKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAnswersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAnswersFreetextAnswerParserRuleCall_6_0 = (RuleCall)cAnswersAssignment_6.eContents().get(0);
		private final Keyword cEndQuestionKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//FreetextQuestion: //	'add' (optional?='optional')? 'freetext question'
		//	"add free text question" optional?="optional"? "text:" text=EString ("requires:" requires=Dependency)? "answers:"
		//	answers=FreetextAnswer "end question";
		public ParserRule getRule() { return rule; }

		////	'add' (optional?='optional')? 'freetext question'
		//"add free text question" optional?="optional"? "text:" text=EString ("requires:" requires=Dependency)? "answers:"
		//answers=FreetextAnswer "end question"
		public Group getGroup() { return cGroup; }

		////	'add' (optional?='optional')? 'freetext question'
		//"add free text question"
		public Keyword getAddFreeTextQuestionKeyword_0() { return cAddFreeTextQuestionKeyword_0; }

		//optional?="optional"?
		public Assignment getOptionalAssignment_1() { return cOptionalAssignment_1; }

		//"optional"
		public Keyword getOptionalOptionalKeyword_1_0() { return cOptionalOptionalKeyword_1_0; }

		//"text:"
		public Keyword getTextKeyword_2() { return cTextKeyword_2; }

		//text=EString
		public Assignment getTextAssignment_3() { return cTextAssignment_3; }

		//EString
		public RuleCall getTextEStringParserRuleCall_3_0() { return cTextEStringParserRuleCall_3_0; }

		//("requires:" requires=Dependency)?
		public Group getGroup_4() { return cGroup_4; }

		//"requires:"
		public Keyword getRequiresKeyword_4_0() { return cRequiresKeyword_4_0; }

		//requires=Dependency
		public Assignment getRequiresAssignment_4_1() { return cRequiresAssignment_4_1; }

		//Dependency
		public RuleCall getRequiresDependencyParserRuleCall_4_1_0() { return cRequiresDependencyParserRuleCall_4_1_0; }

		//"answers:"
		public Keyword getAnswersKeyword_5() { return cAnswersKeyword_5; }

		//answers=FreetextAnswer
		public Assignment getAnswersAssignment_6() { return cAnswersAssignment_6; }

		//FreetextAnswer
		public RuleCall getAnswersFreetextAnswerParserRuleCall_6_0() { return cAnswersFreetextAnswerParserRuleCall_6_0; }

		//"end question"
		public Keyword getEndQuestionKeyword_7() { return cEndQuestionKeyword_7; }
	}

	public class SingleChoiceQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SingleChoiceQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddSingleChoiceQuestionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOptionalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cOptionalOptionalKeyword_1_0 = (Keyword)cOptionalAssignment_1.eContents().get(0);
		private final Keyword cTextKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTextAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTextEStringParserRuleCall_3_0 = (RuleCall)cTextAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cRequiresKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRequiresAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRequiresDependencyParserRuleCall_4_1_0 = (RuleCall)cRequiresAssignment_4_1.eContents().get(0);
		private final Keyword cAnswersKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAnswersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAnswersAnswerParserRuleCall_6_0 = (RuleCall)cAnswersAssignment_6.eContents().get(0);
		private final Assignment cAnswersAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cAnswersAnswerParserRuleCall_7_0 = (RuleCall)cAnswersAssignment_7.eContents().get(0);
		private final Keyword cEndQuestionKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//SingleChoiceQuestion: //	'add' (optional?='optional')? 'single choice question'
		//	"add single choice question" optional?="optional"? "text:" text=EString ("requires:" requires=Dependency)? "answers:"
		//	answers+=Answer answers+=Answer* "end question";
		public ParserRule getRule() { return rule; }

		////	'add' (optional?='optional')? 'single choice question'
		//"add single choice question" optional?="optional"? "text:" text=EString ("requires:" requires=Dependency)? "answers:"
		//answers+=Answer answers+=Answer* "end question"
		public Group getGroup() { return cGroup; }

		////	'add' (optional?='optional')? 'single choice question'
		//"add single choice question"
		public Keyword getAddSingleChoiceQuestionKeyword_0() { return cAddSingleChoiceQuestionKeyword_0; }

		//optional?="optional"?
		public Assignment getOptionalAssignment_1() { return cOptionalAssignment_1; }

		//"optional"
		public Keyword getOptionalOptionalKeyword_1_0() { return cOptionalOptionalKeyword_1_0; }

		//"text:"
		public Keyword getTextKeyword_2() { return cTextKeyword_2; }

		//text=EString
		public Assignment getTextAssignment_3() { return cTextAssignment_3; }

		//EString
		public RuleCall getTextEStringParserRuleCall_3_0() { return cTextEStringParserRuleCall_3_0; }

		//("requires:" requires=Dependency)?
		public Group getGroup_4() { return cGroup_4; }

		//"requires:"
		public Keyword getRequiresKeyword_4_0() { return cRequiresKeyword_4_0; }

		//requires=Dependency
		public Assignment getRequiresAssignment_4_1() { return cRequiresAssignment_4_1; }

		//Dependency
		public RuleCall getRequiresDependencyParserRuleCall_4_1_0() { return cRequiresDependencyParserRuleCall_4_1_0; }

		//"answers:"
		public Keyword getAnswersKeyword_5() { return cAnswersKeyword_5; }

		//answers+=Answer
		public Assignment getAnswersAssignment_6() { return cAnswersAssignment_6; }

		//Answer
		public RuleCall getAnswersAnswerParserRuleCall_6_0() { return cAnswersAnswerParserRuleCall_6_0; }

		//answers+=Answer*
		public Assignment getAnswersAssignment_7() { return cAnswersAssignment_7; }

		//Answer
		public RuleCall getAnswersAnswerParserRuleCall_7_0() { return cAnswersAnswerParserRuleCall_7_0; }

		//"end question"
		public Keyword getEndQuestionKeyword_8() { return cEndQuestionKeyword_8; }
	}

	public class MultiChoiceQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiChoiceQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddMultiChoiceQuestionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOptionalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cOptionalOptionalKeyword_1_0 = (Keyword)cOptionalAssignment_1.eContents().get(0);
		private final Keyword cTextKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTextAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTextEStringParserRuleCall_3_0 = (RuleCall)cTextAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cRequiresKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRequiresAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRequiresDependencyParserRuleCall_4_1_0 = (RuleCall)cRequiresAssignment_4_1.eContents().get(0);
		private final Keyword cAnswersKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAnswersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAnswersAnswerParserRuleCall_6_0 = (RuleCall)cAnswersAssignment_6.eContents().get(0);
		private final Assignment cAnswersAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cAnswersAnswerParserRuleCall_7_0 = (RuleCall)cAnswersAssignment_7.eContents().get(0);
		private final Keyword cEndQuestionKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//MultiChoiceQuestion: // 'add' (optional?='optional')? 'multi choice question'
		//	"add multi choice question" optional?="optional"? "text:" text=EString ("requires:" requires=Dependency)? "answers:"
		//	answers+=Answer answers+=Answer* "end question";
		public ParserRule getRule() { return rule; }

		//// 'add' (optional?='optional')? 'multi choice question'
		//"add multi choice question" optional?="optional"? "text:" text=EString ("requires:" requires=Dependency)? "answers:"
		//answers+=Answer answers+=Answer* "end question"
		public Group getGroup() { return cGroup; }

		//// 'add' (optional?='optional')? 'multi choice question'
		//"add multi choice question"
		public Keyword getAddMultiChoiceQuestionKeyword_0() { return cAddMultiChoiceQuestionKeyword_0; }

		//optional?="optional"?
		public Assignment getOptionalAssignment_1() { return cOptionalAssignment_1; }

		//"optional"
		public Keyword getOptionalOptionalKeyword_1_0() { return cOptionalOptionalKeyword_1_0; }

		//"text:"
		public Keyword getTextKeyword_2() { return cTextKeyword_2; }

		//text=EString
		public Assignment getTextAssignment_3() { return cTextAssignment_3; }

		//EString
		public RuleCall getTextEStringParserRuleCall_3_0() { return cTextEStringParserRuleCall_3_0; }

		//("requires:" requires=Dependency)?
		public Group getGroup_4() { return cGroup_4; }

		//"requires:"
		public Keyword getRequiresKeyword_4_0() { return cRequiresKeyword_4_0; }

		//requires=Dependency
		public Assignment getRequiresAssignment_4_1() { return cRequiresAssignment_4_1; }

		//Dependency
		public RuleCall getRequiresDependencyParserRuleCall_4_1_0() { return cRequiresDependencyParserRuleCall_4_1_0; }

		//"answers:"
		public Keyword getAnswersKeyword_5() { return cAnswersKeyword_5; }

		//answers+=Answer
		public Assignment getAnswersAssignment_6() { return cAnswersAssignment_6; }

		//Answer
		public RuleCall getAnswersAnswerParserRuleCall_6_0() { return cAnswersAnswerParserRuleCall_6_0; }

		//answers+=Answer*
		public Assignment getAnswersAssignment_7() { return cAnswersAssignment_7; }

		//Answer
		public RuleCall getAnswersAnswerParserRuleCall_7_0() { return cAnswersAnswerParserRuleCall_7_0; }

		//"end question"
		public Keyword getEndQuestionKeyword_8() { return cEndQuestionKeyword_8; }
	}

	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLhsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLhsDependencyParserRuleCall_1_0 = (RuleCall)cLhsAssignment_1.eContents().get(0);
		private final Keyword cAndKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRhsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRhsDependencyParserRuleCall_3_0 = (RuleCall)cRhsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//And:
		//	"and(" lhs=Dependency "and" rhs=Dependency ")";
		public ParserRule getRule() { return rule; }

		//"and(" lhs=Dependency "and" rhs=Dependency ")"
		public Group getGroup() { return cGroup; }

		//"and("
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }

		//lhs=Dependency
		public Assignment getLhsAssignment_1() { return cLhsAssignment_1; }

		//Dependency
		public RuleCall getLhsDependencyParserRuleCall_1_0() { return cLhsDependencyParserRuleCall_1_0; }

		//"and"
		public Keyword getAndKeyword_2() { return cAndKeyword_2; }

		//rhs=Dependency
		public Assignment getRhsAssignment_3() { return cRhsAssignment_3; }

		//Dependency
		public RuleCall getRhsDependencyParserRuleCall_3_0() { return cRhsDependencyParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLhsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLhsDependencyParserRuleCall_1_0 = (RuleCall)cLhsAssignment_1.eContents().get(0);
		private final Keyword cOrKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRhsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRhsDependencyParserRuleCall_3_0 = (RuleCall)cRhsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Or:
		//	"or(" lhs=Dependency "or" rhs=Dependency ")";
		public ParserRule getRule() { return rule; }

		//"or(" lhs=Dependency "or" rhs=Dependency ")"
		public Group getGroup() { return cGroup; }

		//"or("
		public Keyword getOrKeyword_0() { return cOrKeyword_0; }

		//lhs=Dependency
		public Assignment getLhsAssignment_1() { return cLhsAssignment_1; }

		//Dependency
		public RuleCall getLhsDependencyParserRuleCall_1_0() { return cLhsDependencyParserRuleCall_1_0; }

		//"or"
		public Keyword getOrKeyword_2() { return cOrKeyword_2; }

		//rhs=Dependency
		public Assignment getRhsAssignment_3() { return cRhsAssignment_3; }

		//Dependency
		public RuleCall getRhsDependencyParserRuleCall_3_0() { return cRhsDependencyParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class AnswerRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnswerRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnswerReferenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefersAnswerCrossReference_1_0 = (CrossReference)cRefersAssignment_1.eContents().get(0);
		private final RuleCall cRefersAnswerEStringParserRuleCall_1_0_1 = (RuleCall)cRefersAnswerCrossReference_1_0.eContents().get(1);
		
		//AnswerRef:
		//	"answer reference:" refers=[Answer|EString];
		public ParserRule getRule() { return rule; }

		//"answer reference:" refers=[Answer|EString]
		public Group getGroup() { return cGroup; }

		//"answer reference:"
		public Keyword getAnswerReferenceKeyword_0() { return cAnswerReferenceKeyword_0; }

		//refers=[Answer|EString]
		public Assignment getRefersAssignment_1() { return cRefersAssignment_1; }

		//[Answer|EString]
		public CrossReference getRefersAnswerCrossReference_1_0() { return cRefersAnswerCrossReference_1_0; }

		//EString
		public RuleCall getRefersAnswerEStringParserRuleCall_1_0_1() { return cRefersAnswerEStringParserRuleCall_1_0_1; }
	}

	public class ChoiceAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChoiceAnswer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddAnswerChoiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cNameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cTextKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTextAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTextEStringParserRuleCall_4_0 = (RuleCall)cTextAssignment_4.eContents().get(0);
		
		//ChoiceAnswer:
		//	"add answer choice" "name:" name=ID "text:" text=EString;
		public ParserRule getRule() { return rule; }

		//"add answer choice" "name:" name=ID "text:" text=EString
		public Group getGroup() { return cGroup; }

		//"add answer choice"
		public Keyword getAddAnswerChoiceKeyword_0() { return cAddAnswerChoiceKeyword_0; }

		//"name:"
		public Keyword getNameKeyword_1() { return cNameKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"text:"
		public Keyword getTextKeyword_3() { return cTextKeyword_3; }

		//text=EString
		public Assignment getTextAssignment_4() { return cTextAssignment_4; }

		//EString
		public RuleCall getTextEStringParserRuleCall_4_0() { return cTextEStringParserRuleCall_4_0; }
	}

	public class FreetextAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FreetextAnswer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddAnswerTextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cNameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cTextKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTextAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTextEStringParserRuleCall_4_0 = (RuleCall)cTextAssignment_4.eContents().get(0);
		
		//FreetextAnswer:
		//	"add answer text" "name:" name=ID "text:" text=EString;
		public ParserRule getRule() { return rule; }

		//"add answer text" "name:" name=ID "text:" text=EString
		public Group getGroup() { return cGroup; }

		//"add answer text"
		public Keyword getAddAnswerTextKeyword_0() { return cAddAnswerTextKeyword_0; }

		//"name:"
		public Keyword getNameKeyword_1() { return cNameKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"text:"
		public Keyword getTextKeyword_3() { return cTextKeyword_3; }

		//text=EString
		public Assignment getTextAssignment_4() { return cTextAssignment_4; }

		//EString
		public RuleCall getTextEStringParserRuleCall_4_0() { return cTextEStringParserRuleCall_4_0; }
	}
	
	
	private SurveyElements pSurvey;
	private PageElements pPage;
	private QuestionElements pQuestion;
	private DependencyElements pDependency;
	private AnswerElements pAnswer;
	private EStringElements pEString;
	private QuestionPageElements pQuestionPage;
	private DescriptionPageElements pDescriptionPage;
	private ResultPageElements pResultPage;
	private EBooleanElements pEBoolean;
	private FreetextQuestionElements pFreetextQuestion;
	private SingleChoiceQuestionElements pSingleChoiceQuestion;
	private MultiChoiceQuestionElements pMultiChoiceQuestion;
	private AndElements pAnd;
	private OrElements pOr;
	private AnswerRefElements pAnswerRef;
	private ChoiceAnswerElements pChoiceAnswer;
	private FreetextAnswerElements pFreetextAnswer;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SurveyDSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.itu.smdp.group19.SurveyDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Survey:
	//	"start survey" "title:" title=EString "pages:" pages+=Page pages+=Page* "end survey";
	public SurveyElements getSurveyAccess() {
		return (pSurvey != null) ? pSurvey : (pSurvey = new SurveyElements());
	}
	
	public ParserRule getSurveyRule() {
		return getSurveyAccess().getRule();
	}

	//Page:
	//	QuestionPage | DescriptionPage | ResultPage;
	public PageElements getPageAccess() {
		return (pPage != null) ? pPage : (pPage = new PageElements());
	}
	
	public ParserRule getPageRule() {
		return getPageAccess().getRule();
	}

	//Question:
	//	FreetextQuestion | SingleChoiceQuestion | MultiChoiceQuestion;
	public QuestionElements getQuestionAccess() {
		return (pQuestion != null) ? pQuestion : (pQuestion = new QuestionElements());
	}
	
	public ParserRule getQuestionRule() {
		return getQuestionAccess().getRule();
	}

	//Dependency:
	//	And | Or | AnswerRef;
	public DependencyElements getDependencyAccess() {
		return (pDependency != null) ? pDependency : (pDependency = new DependencyElements());
	}
	
	public ParserRule getDependencyRule() {
		return getDependencyAccess().getRule();
	}

	//Answer:
	//	ChoiceAnswer | FreetextAnswer;
	public AnswerElements getAnswerAccess() {
		return (pAnswer != null) ? pAnswer : (pAnswer = new AnswerElements());
	}
	
	public ParserRule getAnswerRule() {
		return getAnswerAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	////Page_Impl returns Page:
	////	'Page'
	////	'{'
	////		'title' title=EString
	////		('text' text=EString)?
	////	'}';
	//QuestionPage:
	//	"add question page" "title:" title=EString ("text:" text=EString)? "questions:" questions+=Question
	//	questions+=Question* "end page";
	public QuestionPageElements getQuestionPageAccess() {
		return (pQuestionPage != null) ? pQuestionPage : (pQuestionPage = new QuestionPageElements());
	}
	
	public ParserRule getQuestionPageRule() {
		return getQuestionPageAccess().getRule();
	}

	//DescriptionPage:
	//	"add description page" "title:" title=EString ("text:" text=EString)? "end page";
	public DescriptionPageElements getDescriptionPageAccess() {
		return (pDescriptionPage != null) ? pDescriptionPage : (pDescriptionPage = new DescriptionPageElements());
	}
	
	public ParserRule getDescriptionPageRule() {
		return getDescriptionPageAccess().getRule();
	}

	//ResultPage:
	//	"add result page" "title:" title=EString ("text:" text=EString)? "end page";
	public ResultPageElements getResultPageAccess() {
		return (pResultPage != null) ? pResultPage : (pResultPage = new ResultPageElements());
	}
	
	public ParserRule getResultPageRule() {
		return getResultPageAccess().getRule();
	}

	////Question_Impl returns Question:
	////	optional?='optional'
	////	'Question'
	////	'{'
	////	'text' text=EString
	////	('requires' requires=Dependency)?
	////	'}';
	//EBoolean returns ecore::EBoolean:
	//	"true" | "false";
	public EBooleanElements getEBooleanAccess() {
		return (pEBoolean != null) ? pEBoolean : (pEBoolean = new EBooleanElements());
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}

	//FreetextQuestion: //	'add' (optional?='optional')? 'freetext question'
	//	"add free text question" optional?="optional"? "text:" text=EString ("requires:" requires=Dependency)? "answers:"
	//	answers=FreetextAnswer "end question";
	public FreetextQuestionElements getFreetextQuestionAccess() {
		return (pFreetextQuestion != null) ? pFreetextQuestion : (pFreetextQuestion = new FreetextQuestionElements());
	}
	
	public ParserRule getFreetextQuestionRule() {
		return getFreetextQuestionAccess().getRule();
	}

	//SingleChoiceQuestion: //	'add' (optional?='optional')? 'single choice question'
	//	"add single choice question" optional?="optional"? "text:" text=EString ("requires:" requires=Dependency)? "answers:"
	//	answers+=Answer answers+=Answer* "end question";
	public SingleChoiceQuestionElements getSingleChoiceQuestionAccess() {
		return (pSingleChoiceQuestion != null) ? pSingleChoiceQuestion : (pSingleChoiceQuestion = new SingleChoiceQuestionElements());
	}
	
	public ParserRule getSingleChoiceQuestionRule() {
		return getSingleChoiceQuestionAccess().getRule();
	}

	//MultiChoiceQuestion: // 'add' (optional?='optional')? 'multi choice question'
	//	"add multi choice question" optional?="optional"? "text:" text=EString ("requires:" requires=Dependency)? "answers:"
	//	answers+=Answer answers+=Answer* "end question";
	public MultiChoiceQuestionElements getMultiChoiceQuestionAccess() {
		return (pMultiChoiceQuestion != null) ? pMultiChoiceQuestion : (pMultiChoiceQuestion = new MultiChoiceQuestionElements());
	}
	
	public ParserRule getMultiChoiceQuestionRule() {
		return getMultiChoiceQuestionAccess().getRule();
	}

	//And:
	//	"and(" lhs=Dependency "and" rhs=Dependency ")";
	public AndElements getAndAccess() {
		return (pAnd != null) ? pAnd : (pAnd = new AndElements());
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}

	//Or:
	//	"or(" lhs=Dependency "or" rhs=Dependency ")";
	public OrElements getOrAccess() {
		return (pOr != null) ? pOr : (pOr = new OrElements());
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}

	//AnswerRef:
	//	"answer reference:" refers=[Answer|EString];
	public AnswerRefElements getAnswerRefAccess() {
		return (pAnswerRef != null) ? pAnswerRef : (pAnswerRef = new AnswerRefElements());
	}
	
	public ParserRule getAnswerRefRule() {
		return getAnswerRefAccess().getRule();
	}

	//ChoiceAnswer:
	//	"add answer choice" "name:" name=ID "text:" text=EString;
	public ChoiceAnswerElements getChoiceAnswerAccess() {
		return (pChoiceAnswer != null) ? pChoiceAnswer : (pChoiceAnswer = new ChoiceAnswerElements());
	}
	
	public ParserRule getChoiceAnswerRule() {
		return getChoiceAnswerAccess().getRule();
	}

	//FreetextAnswer:
	//	"add answer text" "name:" name=ID "text:" text=EString;
	public FreetextAnswerElements getFreetextAnswerAccess() {
		return (pFreetextAnswer != null) ? pFreetextAnswer : (pFreetextAnswer = new FreetextAnswerElements());
	}
	
	public ParserRule getFreetextAnswerRule() {
		return getFreetextAnswerAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
