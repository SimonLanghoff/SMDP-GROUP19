/*
* generated by Xtext
*/
package dk.itu.smdp.group19.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SurveyDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SurveyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Survey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStartSurveyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTitleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTitleEStringParserRuleCall_1_0 = (RuleCall)cTitleAssignment_1.eContents().get(0);
		private final Keyword cPagesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPagesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPagesPageParserRuleCall_3_0 = (RuleCall)cPagesAssignment_3.eContents().get(0);
		private final Assignment cPagesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPagesPageParserRuleCall_4_0 = (RuleCall)cPagesAssignment_4.eContents().get(0);
		private final Keyword cEndSurveyKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Survey:
		//	"start survey" title=EString "pages:" pages+=Page pages+=Page* "end survey";
		public ParserRule getRule() { return rule; }

		//"start survey" title=EString "pages:" pages+=Page pages+=Page* "end survey"
		public Group getGroup() { return cGroup; }

		//"start survey"
		public Keyword getStartSurveyKeyword_0() { return cStartSurveyKeyword_0; }

		//title=EString
		public Assignment getTitleAssignment_1() { return cTitleAssignment_1; }

		//EString
		public RuleCall getTitleEStringParserRuleCall_1_0() { return cTitleEStringParserRuleCall_1_0; }

		//"pages:"
		public Keyword getPagesKeyword_2() { return cPagesKeyword_2; }

		//pages+=Page
		public Assignment getPagesAssignment_3() { return cPagesAssignment_3; }

		//Page
		public RuleCall getPagesPageParserRuleCall_3_0() { return cPagesPageParserRuleCall_3_0; }

		//pages+=Page*
		public Assignment getPagesAssignment_4() { return cPagesAssignment_4; }

		//Page
		public RuleCall getPagesPageParserRuleCall_4_0() { return cPagesPageParserRuleCall_4_0; }

		//"end survey"
		public Keyword getEndSurveyKeyword_5() { return cEndSurveyKeyword_5; }
	}

	public class PageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Page");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cQuestionPageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDescriptionPageParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cResultPageParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Page:
		//	QuestionPage | DescriptionPage | ResultPage;
		public ParserRule getRule() { return rule; }

		//QuestionPage | DescriptionPage | ResultPage
		public Alternatives getAlternatives() { return cAlternatives; }

		//QuestionPage
		public RuleCall getQuestionPageParserRuleCall_0() { return cQuestionPageParserRuleCall_0; }

		//DescriptionPage
		public RuleCall getDescriptionPageParserRuleCall_1() { return cDescriptionPageParserRuleCall_1; }

		//ResultPage
		public RuleCall getResultPageParserRuleCall_2() { return cResultPageParserRuleCall_2; }
	}

	public class QuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Question");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFreetextQuestionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSingleChoiceQuestionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMultiChoiceQuestionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Question:
		//	FreetextQuestion | SingleChoiceQuestion | MultiChoiceQuestion;
		public ParserRule getRule() { return rule; }

		//FreetextQuestion | SingleChoiceQuestion | MultiChoiceQuestion
		public Alternatives getAlternatives() { return cAlternatives; }

		//FreetextQuestion
		public RuleCall getFreetextQuestionParserRuleCall_0() { return cFreetextQuestionParserRuleCall_0; }

		//SingleChoiceQuestion
		public RuleCall getSingleChoiceQuestionParserRuleCall_1() { return cSingleChoiceQuestionParserRuleCall_1; }

		//MultiChoiceQuestion
		public RuleCall getMultiChoiceQuestionParserRuleCall_2() { return cMultiChoiceQuestionParserRuleCall_2; }
	}

	public class DependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dependency");
		private final RuleCall cCheckOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Dependency:
		//	CheckOr;
		public ParserRule getRule() { return rule; }

		//CheckOr
		public RuleCall getCheckOrParserRuleCall() { return cCheckOrParserRuleCall; }
	}

	public class AnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Answer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cChoiceAnswerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFreetextAnswerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Answer:
		//	ChoiceAnswer | FreetextAnswer;
		public ParserRule getRule() { return rule; }

		//ChoiceAnswer | FreetextAnswer
		public Alternatives getAlternatives() { return cAlternatives; }

		//ChoiceAnswer
		public RuleCall getChoiceAnswerParserRuleCall_0() { return cChoiceAnswerParserRuleCall_0; }

		//FreetextAnswer
		public RuleCall getFreetextAnswerParserRuleCall_1() { return cFreetextAnswerParserRuleCall_1; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class QuestionPageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QuestionPage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionPageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTitleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTitleEStringParserRuleCall_1_0 = (RuleCall)cTitleAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTextAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTextEStringParserRuleCall_2_1_0 = (RuleCall)cTextAssignment_2_1.eContents().get(0);
		private final Keyword cQuestionsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cQuestionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cQuestionsQuestionParserRuleCall_4_0 = (RuleCall)cQuestionsAssignment_4.eContents().get(0);
		private final Assignment cQuestionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cQuestionsQuestionParserRuleCall_5_0 = (RuleCall)cQuestionsAssignment_5.eContents().get(0);
		private final Keyword cEndPageKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		////Page_Impl returns Page:
		////	'Page'
		////	'{'
		////		'title' title=EString
		////		('text' text=EString)?
		////	'}';
		//QuestionPage:
		//	"question page" title=EString (":" text=EString)? "questions:" questions+=Question questions+=Question* "end page";
		public ParserRule getRule() { return rule; }

		//"question page" title=EString (":" text=EString)? "questions:" questions+=Question questions+=Question* "end page"
		public Group getGroup() { return cGroup; }

		//"question page"
		public Keyword getQuestionPageKeyword_0() { return cQuestionPageKeyword_0; }

		//title=EString
		public Assignment getTitleAssignment_1() { return cTitleAssignment_1; }

		//EString
		public RuleCall getTitleEStringParserRuleCall_1_0() { return cTitleEStringParserRuleCall_1_0; }

		//(":" text=EString)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//text=EString
		public Assignment getTextAssignment_2_1() { return cTextAssignment_2_1; }

		//EString
		public RuleCall getTextEStringParserRuleCall_2_1_0() { return cTextEStringParserRuleCall_2_1_0; }

		//"questions:"
		public Keyword getQuestionsKeyword_3() { return cQuestionsKeyword_3; }

		//questions+=Question
		public Assignment getQuestionsAssignment_4() { return cQuestionsAssignment_4; }

		//Question
		public RuleCall getQuestionsQuestionParserRuleCall_4_0() { return cQuestionsQuestionParserRuleCall_4_0; }

		//questions+=Question*
		public Assignment getQuestionsAssignment_5() { return cQuestionsAssignment_5; }

		//Question
		public RuleCall getQuestionsQuestionParserRuleCall_5_0() { return cQuestionsQuestionParserRuleCall_5_0; }

		//"end page"
		public Keyword getEndPageKeyword_6() { return cEndPageKeyword_6; }
	}

	public class DescriptionPageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DescriptionPage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDescriptionPageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTitleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTitleEStringParserRuleCall_1_0 = (RuleCall)cTitleAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTextAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTextEStringParserRuleCall_2_1_0 = (RuleCall)cTextAssignment_2_1.eContents().get(0);
		private final Keyword cEndPageKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DescriptionPage:
		//	"description page" title=EString (":" text=EString)? "end page";
		public ParserRule getRule() { return rule; }

		//"description page" title=EString (":" text=EString)? "end page"
		public Group getGroup() { return cGroup; }

		//"description page"
		public Keyword getDescriptionPageKeyword_0() { return cDescriptionPageKeyword_0; }

		//title=EString
		public Assignment getTitleAssignment_1() { return cTitleAssignment_1; }

		//EString
		public RuleCall getTitleEStringParserRuleCall_1_0() { return cTitleEStringParserRuleCall_1_0; }

		//(":" text=EString)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//text=EString
		public Assignment getTextAssignment_2_1() { return cTextAssignment_2_1; }

		//EString
		public RuleCall getTextEStringParserRuleCall_2_1_0() { return cTextEStringParserRuleCall_2_1_0; }

		//"end page"
		public Keyword getEndPageKeyword_3() { return cEndPageKeyword_3; }
	}

	public class ResultPageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResultPage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResultPageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTitleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTitleEStringParserRuleCall_1_0 = (RuleCall)cTitleAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTextAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTextEStringParserRuleCall_2_1_0 = (RuleCall)cTextAssignment_2_1.eContents().get(0);
		private final Keyword cEndPageKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ResultPage:
		//	"result page" title=EString (":" text=EString)? "end page";
		public ParserRule getRule() { return rule; }

		//"result page" title=EString (":" text=EString)? "end page"
		public Group getGroup() { return cGroup; }

		//"result page"
		public Keyword getResultPageKeyword_0() { return cResultPageKeyword_0; }

		//title=EString
		public Assignment getTitleAssignment_1() { return cTitleAssignment_1; }

		//EString
		public RuleCall getTitleEStringParserRuleCall_1_0() { return cTitleEStringParserRuleCall_1_0; }

		//(":" text=EString)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//text=EString
		public Assignment getTextAssignment_2_1() { return cTextAssignment_2_1; }

		//EString
		public RuleCall getTextEStringParserRuleCall_2_1_0() { return cTextEStringParserRuleCall_2_1_0; }

		//"end page"
		public Keyword getEndPageKeyword_3() { return cEndPageKeyword_3; }
	}

	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		////Question_Impl returns Question:
		////	optional?='optional'
		////	'Question'
		////	'{'
		////	'text' text=EString
		////	('requires' requires=Dependency)?
		////	'}';
		//EBoolean returns ecore::EBoolean:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class FreetextQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FreetextQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOptionalAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOptionalOptionalKeyword_0_0 = (Keyword)cOptionalAssignment_0.eContents().get(0);
		private final Keyword cFreeTextQuestionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTextEStringParserRuleCall_2_0 = (RuleCall)cTextAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cRequiresKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRequiresAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRequiresDependencyParserRuleCall_3_1_0 = (RuleCall)cRequiresAssignment_3_1.eContents().get(0);
		private final Keyword cAnswersKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAnswersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAnswersFreetextAnswerParserRuleCall_5_0 = (RuleCall)cAnswersAssignment_5.eContents().get(0);
		private final Keyword cEndQuestionKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//FreetextQuestion:
		//	optional?="optional"? "free text question" text=EString //	(optional?='optional')?
		//	("requires:" requires=Dependency)? "answers:" answers=FreetextAnswer "end question";
		public ParserRule getRule() { return rule; }

		//optional?="optional"? "free text question" text=EString //	(optional?='optional')?
		//("requires:" requires=Dependency)? "answers:" answers=FreetextAnswer "end question"
		public Group getGroup() { return cGroup; }

		//optional?="optional"?
		public Assignment getOptionalAssignment_0() { return cOptionalAssignment_0; }

		//"optional"
		public Keyword getOptionalOptionalKeyword_0_0() { return cOptionalOptionalKeyword_0_0; }

		//"free text question"
		public Keyword getFreeTextQuestionKeyword_1() { return cFreeTextQuestionKeyword_1; }

		//text=EString
		public Assignment getTextAssignment_2() { return cTextAssignment_2; }

		//EString
		public RuleCall getTextEStringParserRuleCall_2_0() { return cTextEStringParserRuleCall_2_0; }

		//("requires:" requires=Dependency)?
		public Group getGroup_3() { return cGroup_3; }

		//"requires:"
		public Keyword getRequiresKeyword_3_0() { return cRequiresKeyword_3_0; }

		//requires=Dependency
		public Assignment getRequiresAssignment_3_1() { return cRequiresAssignment_3_1; }

		//Dependency
		public RuleCall getRequiresDependencyParserRuleCall_3_1_0() { return cRequiresDependencyParserRuleCall_3_1_0; }

		//"answers:"
		public Keyword getAnswersKeyword_4() { return cAnswersKeyword_4; }

		//answers=FreetextAnswer
		public Assignment getAnswersAssignment_5() { return cAnswersAssignment_5; }

		//FreetextAnswer
		public RuleCall getAnswersFreetextAnswerParserRuleCall_5_0() { return cAnswersFreetextAnswerParserRuleCall_5_0; }

		//"end question"
		public Keyword getEndQuestionKeyword_6() { return cEndQuestionKeyword_6; }
	}

	public class SingleChoiceQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SingleChoiceQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOptionalAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOptionalOptionalKeyword_0_0 = (Keyword)cOptionalAssignment_0.eContents().get(0);
		private final Keyword cSingleChoiceQuestionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTextEStringParserRuleCall_2_0 = (RuleCall)cTextAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cRequiresKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRequiresAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRequiresDependencyParserRuleCall_3_1_0 = (RuleCall)cRequiresAssignment_3_1.eContents().get(0);
		private final Keyword cAnswersKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAnswersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAnswersAnswerParserRuleCall_5_0 = (RuleCall)cAnswersAssignment_5.eContents().get(0);
		private final Assignment cAnswersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAnswersAnswerParserRuleCall_6_0 = (RuleCall)cAnswersAssignment_6.eContents().get(0);
		private final Keyword cEndQuestionKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//SingleChoiceQuestion:
		//	optional?="optional"? "single choice question" text=EString //	(optional?='optional')?
		//	("requires:" requires=Dependency)? "answers:" answers+=Answer answers+=Answer* "end question";
		public ParserRule getRule() { return rule; }

		//optional?="optional"? "single choice question" text=EString //	(optional?='optional')?
		//("requires:" requires=Dependency)? "answers:" answers+=Answer answers+=Answer* "end question"
		public Group getGroup() { return cGroup; }

		//optional?="optional"?
		public Assignment getOptionalAssignment_0() { return cOptionalAssignment_0; }

		//"optional"
		public Keyword getOptionalOptionalKeyword_0_0() { return cOptionalOptionalKeyword_0_0; }

		//"single choice question"
		public Keyword getSingleChoiceQuestionKeyword_1() { return cSingleChoiceQuestionKeyword_1; }

		//text=EString
		public Assignment getTextAssignment_2() { return cTextAssignment_2; }

		//EString
		public RuleCall getTextEStringParserRuleCall_2_0() { return cTextEStringParserRuleCall_2_0; }

		//("requires:" requires=Dependency)?
		public Group getGroup_3() { return cGroup_3; }

		//"requires:"
		public Keyword getRequiresKeyword_3_0() { return cRequiresKeyword_3_0; }

		//requires=Dependency
		public Assignment getRequiresAssignment_3_1() { return cRequiresAssignment_3_1; }

		//Dependency
		public RuleCall getRequiresDependencyParserRuleCall_3_1_0() { return cRequiresDependencyParserRuleCall_3_1_0; }

		//"answers:"
		public Keyword getAnswersKeyword_4() { return cAnswersKeyword_4; }

		//answers+=Answer
		public Assignment getAnswersAssignment_5() { return cAnswersAssignment_5; }

		//Answer
		public RuleCall getAnswersAnswerParserRuleCall_5_0() { return cAnswersAnswerParserRuleCall_5_0; }

		//answers+=Answer*
		public Assignment getAnswersAssignment_6() { return cAnswersAssignment_6; }

		//Answer
		public RuleCall getAnswersAnswerParserRuleCall_6_0() { return cAnswersAnswerParserRuleCall_6_0; }

		//"end question"
		public Keyword getEndQuestionKeyword_7() { return cEndQuestionKeyword_7; }
	}

	public class MultiChoiceQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiChoiceQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOptionalAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOptionalOptionalKeyword_0_0 = (Keyword)cOptionalAssignment_0.eContents().get(0);
		private final Keyword cMultiChoiceQuestionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTextEStringParserRuleCall_2_0 = (RuleCall)cTextAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cRequiresKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRequiresAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRequiresDependencyParserRuleCall_3_1_0 = (RuleCall)cRequiresAssignment_3_1.eContents().get(0);
		private final Keyword cAnswersKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAnswersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAnswersAnswerParserRuleCall_5_0 = (RuleCall)cAnswersAssignment_5.eContents().get(0);
		private final Assignment cAnswersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAnswersAnswerParserRuleCall_6_0 = (RuleCall)cAnswersAssignment_6.eContents().get(0);
		private final Keyword cEndQuestionKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//MultiChoiceQuestion:
		//	optional?="optional"? "multi choice question" text=EString //	(optional?='optional')?
		//	("requires:" requires=Dependency)? "answers:" answers+=Answer answers+=Answer* "end question";
		public ParserRule getRule() { return rule; }

		//optional?="optional"? "multi choice question" text=EString //	(optional?='optional')?
		//("requires:" requires=Dependency)? "answers:" answers+=Answer answers+=Answer* "end question"
		public Group getGroup() { return cGroup; }

		//optional?="optional"?
		public Assignment getOptionalAssignment_0() { return cOptionalAssignment_0; }

		//"optional"
		public Keyword getOptionalOptionalKeyword_0_0() { return cOptionalOptionalKeyword_0_0; }

		//"multi choice question"
		public Keyword getMultiChoiceQuestionKeyword_1() { return cMultiChoiceQuestionKeyword_1; }

		//text=EString
		public Assignment getTextAssignment_2() { return cTextAssignment_2; }

		//EString
		public RuleCall getTextEStringParserRuleCall_2_0() { return cTextEStringParserRuleCall_2_0; }

		//("requires:" requires=Dependency)?
		public Group getGroup_3() { return cGroup_3; }

		//"requires:"
		public Keyword getRequiresKeyword_3_0() { return cRequiresKeyword_3_0; }

		//requires=Dependency
		public Assignment getRequiresAssignment_3_1() { return cRequiresAssignment_3_1; }

		//Dependency
		public RuleCall getRequiresDependencyParserRuleCall_3_1_0() { return cRequiresDependencyParserRuleCall_3_1_0; }

		//"answers:"
		public Keyword getAnswersKeyword_4() { return cAnswersKeyword_4; }

		//answers+=Answer
		public Assignment getAnswersAssignment_5() { return cAnswersAssignment_5; }

		//Answer
		public RuleCall getAnswersAnswerParserRuleCall_5_0() { return cAnswersAnswerParserRuleCall_5_0; }

		//answers+=Answer*
		public Assignment getAnswersAssignment_6() { return cAnswersAssignment_6; }

		//Answer
		public RuleCall getAnswersAnswerParserRuleCall_6_0() { return cAnswersAnswerParserRuleCall_6_0; }

		//"end question"
		public Keyword getEndQuestionKeyword_7() { return cEndQuestionKeyword_7; }
	}

	public class CheckOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CheckOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCheckAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLhsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRhsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsCheckAndParserRuleCall_1_2_0 = (RuleCall)cRhsAssignment_1_2.eContents().get(0);
		
		//CheckOr returns Dependency:
		//	CheckAnd ({Or.lhs=current} "or" rhs=CheckAnd)*;
		public ParserRule getRule() { return rule; }

		//CheckAnd ({Or.lhs=current} "or" rhs=CheckAnd)*
		public Group getGroup() { return cGroup; }

		//CheckAnd
		public RuleCall getCheckAndParserRuleCall_0() { return cCheckAndParserRuleCall_0; }

		//({Or.lhs=current} "or" rhs=CheckAnd)*
		public Group getGroup_1() { return cGroup_1; }

		//{Or.lhs=current}
		public Action getOrLhsAction_1_0() { return cOrLhsAction_1_0; }

		//"or"
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }

		//rhs=CheckAnd
		public Assignment getRhsAssignment_1_2() { return cRhsAssignment_1_2; }

		//CheckAnd
		public RuleCall getRhsCheckAndParserRuleCall_1_2_0() { return cRhsCheckAndParserRuleCall_1_2_0; }
	}

	public class CheckAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CheckAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCheckNotParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLhsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRhsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsCheckNotParserRuleCall_1_2_0 = (RuleCall)cRhsAssignment_1_2.eContents().get(0);
		
		//CheckAnd returns Dependency:
		//	CheckNot ({And.lhs=current} "and" rhs=CheckNot)*;
		public ParserRule getRule() { return rule; }

		//CheckNot ({And.lhs=current} "and" rhs=CheckNot)*
		public Group getGroup() { return cGroup; }

		//CheckNot
		public RuleCall getCheckNotParserRuleCall_0() { return cCheckNotParserRuleCall_0; }

		//({And.lhs=current} "and" rhs=CheckNot)*
		public Group getGroup_1() { return cGroup_1; }

		//{And.lhs=current}
		public Action getAndLhsAction_1_0() { return cAndLhsAction_1_0; }

		//"and"
		public Keyword getAndKeyword_1_1() { return cAndKeyword_1_1; }

		//rhs=CheckNot
		public Assignment getRhsAssignment_1_2() { return cRhsAssignment_1_2; }

		//CheckNot
		public RuleCall getRhsCheckNotParserRuleCall_1_2_0() { return cRhsCheckNotParserRuleCall_1_2_0; }
	}

	public class CheckNotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CheckNot");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNotKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cBottomParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Action cNotDependencyAction_0_2 = (Action)cGroup_0.eContents().get(2);
		private final RuleCall cBottomParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CheckNot returns Dependency:
		//	"not" Bottom {Not.dependency=current} | Bottom;
		public ParserRule getRule() { return rule; }

		//"not" Bottom {Not.dependency=current} | Bottom
		public Alternatives getAlternatives() { return cAlternatives; }

		//"not" Bottom {Not.dependency=current}
		public Group getGroup_0() { return cGroup_0; }

		//"not"
		public Keyword getNotKeyword_0_0() { return cNotKeyword_0_0; }

		//Bottom
		public RuleCall getBottomParserRuleCall_0_1() { return cBottomParserRuleCall_0_1; }

		//{Not.dependency=current}
		public Action getNotDependencyAction_0_2() { return cNotDependencyAction_0_2; }

		//Bottom
		public RuleCall getBottomParserRuleCall_1() { return cBottomParserRuleCall_1; }
	}

	public class BottomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Bottom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAnswerRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cDependencyParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Bottom returns Dependency:
		//	AnswerRef | "(" Dependency ")";
		public ParserRule getRule() { return rule; }

		//AnswerRef | "(" Dependency ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//AnswerRef
		public RuleCall getAnswerRefParserRuleCall_0() { return cAnswerRefParserRuleCall_0; }

		//"(" Dependency ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//Dependency
		public RuleCall getDependencyParserRuleCall_1_1() { return cDependencyParserRuleCall_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class AnswerRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnswerRef");
		private final Assignment cRefersAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRefersAnswerCrossReference_0 = (CrossReference)cRefersAssignment.eContents().get(0);
		private final RuleCall cRefersAnswerEStringParserRuleCall_0_1 = (RuleCall)cRefersAnswerCrossReference_0.eContents().get(1);
		
		//AnswerRef:
		//	refers=[Answer|EString];
		public ParserRule getRule() { return rule; }

		//refers=[Answer|EString]
		public Assignment getRefersAssignment() { return cRefersAssignment; }

		//[Answer|EString]
		public CrossReference getRefersAnswerCrossReference_0() { return cRefersAnswerCrossReference_0; }

		//EString
		public RuleCall getRefersAnswerEStringParserRuleCall_0_1() { return cRefersAnswerEStringParserRuleCall_0_1; }
	}

	public class ChoiceAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChoiceAnswer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnswerChoiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTextAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTextEStringParserRuleCall_3_0 = (RuleCall)cTextAssignment_3.eContents().get(0);
		
		//ChoiceAnswer:
		//	"answer choice" name=ID ":" text=EString;
		public ParserRule getRule() { return rule; }

		//"answer choice" name=ID ":" text=EString
		public Group getGroup() { return cGroup; }

		//"answer choice"
		public Keyword getAnswerChoiceKeyword_0() { return cAnswerChoiceKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//text=EString
		public Assignment getTextAssignment_3() { return cTextAssignment_3; }

		//EString
		public RuleCall getTextEStringParserRuleCall_3_0() { return cTextEStringParserRuleCall_3_0; }
	}

	public class FreetextAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FreetextAnswer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnswerTextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTextAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTextEStringParserRuleCall_3_0 = (RuleCall)cTextAssignment_3.eContents().get(0);
		
		//FreetextAnswer:
		//	"answer text" name=ID ":" text=EString;
		public ParserRule getRule() { return rule; }

		//"answer text" name=ID ":" text=EString
		public Group getGroup() { return cGroup; }

		//"answer text"
		public Keyword getAnswerTextKeyword_0() { return cAnswerTextKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//text=EString
		public Assignment getTextAssignment_3() { return cTextAssignment_3; }

		//EString
		public RuleCall getTextEStringParserRuleCall_3_0() { return cTextEStringParserRuleCall_3_0; }
	}
	
	
	private SurveyElements pSurvey;
	private PageElements pPage;
	private QuestionElements pQuestion;
	private DependencyElements pDependency;
	private AnswerElements pAnswer;
	private EStringElements pEString;
	private QuestionPageElements pQuestionPage;
	private DescriptionPageElements pDescriptionPage;
	private ResultPageElements pResultPage;
	private EBooleanElements pEBoolean;
	private FreetextQuestionElements pFreetextQuestion;
	private SingleChoiceQuestionElements pSingleChoiceQuestion;
	private MultiChoiceQuestionElements pMultiChoiceQuestion;
	private CheckOrElements pCheckOr;
	private CheckAndElements pCheckAnd;
	private CheckNotElements pCheckNot;
	private BottomElements pBottom;
	private AnswerRefElements pAnswerRef;
	private ChoiceAnswerElements pChoiceAnswer;
	private FreetextAnswerElements pFreetextAnswer;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SurveyDSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.itu.smdp.group19.SurveyDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Survey:
	//	"start survey" title=EString "pages:" pages+=Page pages+=Page* "end survey";
	public SurveyElements getSurveyAccess() {
		return (pSurvey != null) ? pSurvey : (pSurvey = new SurveyElements());
	}
	
	public ParserRule getSurveyRule() {
		return getSurveyAccess().getRule();
	}

	//Page:
	//	QuestionPage | DescriptionPage | ResultPage;
	public PageElements getPageAccess() {
		return (pPage != null) ? pPage : (pPage = new PageElements());
	}
	
	public ParserRule getPageRule() {
		return getPageAccess().getRule();
	}

	//Question:
	//	FreetextQuestion | SingleChoiceQuestion | MultiChoiceQuestion;
	public QuestionElements getQuestionAccess() {
		return (pQuestion != null) ? pQuestion : (pQuestion = new QuestionElements());
	}
	
	public ParserRule getQuestionRule() {
		return getQuestionAccess().getRule();
	}

	//Dependency:
	//	CheckOr;
	public DependencyElements getDependencyAccess() {
		return (pDependency != null) ? pDependency : (pDependency = new DependencyElements());
	}
	
	public ParserRule getDependencyRule() {
		return getDependencyAccess().getRule();
	}

	//Answer:
	//	ChoiceAnswer | FreetextAnswer;
	public AnswerElements getAnswerAccess() {
		return (pAnswer != null) ? pAnswer : (pAnswer = new AnswerElements());
	}
	
	public ParserRule getAnswerRule() {
		return getAnswerAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	////Page_Impl returns Page:
	////	'Page'
	////	'{'
	////		'title' title=EString
	////		('text' text=EString)?
	////	'}';
	//QuestionPage:
	//	"question page" title=EString (":" text=EString)? "questions:" questions+=Question questions+=Question* "end page";
	public QuestionPageElements getQuestionPageAccess() {
		return (pQuestionPage != null) ? pQuestionPage : (pQuestionPage = new QuestionPageElements());
	}
	
	public ParserRule getQuestionPageRule() {
		return getQuestionPageAccess().getRule();
	}

	//DescriptionPage:
	//	"description page" title=EString (":" text=EString)? "end page";
	public DescriptionPageElements getDescriptionPageAccess() {
		return (pDescriptionPage != null) ? pDescriptionPage : (pDescriptionPage = new DescriptionPageElements());
	}
	
	public ParserRule getDescriptionPageRule() {
		return getDescriptionPageAccess().getRule();
	}

	//ResultPage:
	//	"result page" title=EString (":" text=EString)? "end page";
	public ResultPageElements getResultPageAccess() {
		return (pResultPage != null) ? pResultPage : (pResultPage = new ResultPageElements());
	}
	
	public ParserRule getResultPageRule() {
		return getResultPageAccess().getRule();
	}

	////Question_Impl returns Question:
	////	optional?='optional'
	////	'Question'
	////	'{'
	////	'text' text=EString
	////	('requires' requires=Dependency)?
	////	'}';
	//EBoolean returns ecore::EBoolean:
	//	"true" | "false";
	public EBooleanElements getEBooleanAccess() {
		return (pEBoolean != null) ? pEBoolean : (pEBoolean = new EBooleanElements());
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}

	//FreetextQuestion:
	//	optional?="optional"? "free text question" text=EString //	(optional?='optional')?
	//	("requires:" requires=Dependency)? "answers:" answers=FreetextAnswer "end question";
	public FreetextQuestionElements getFreetextQuestionAccess() {
		return (pFreetextQuestion != null) ? pFreetextQuestion : (pFreetextQuestion = new FreetextQuestionElements());
	}
	
	public ParserRule getFreetextQuestionRule() {
		return getFreetextQuestionAccess().getRule();
	}

	//SingleChoiceQuestion:
	//	optional?="optional"? "single choice question" text=EString //	(optional?='optional')?
	//	("requires:" requires=Dependency)? "answers:" answers+=Answer answers+=Answer* "end question";
	public SingleChoiceQuestionElements getSingleChoiceQuestionAccess() {
		return (pSingleChoiceQuestion != null) ? pSingleChoiceQuestion : (pSingleChoiceQuestion = new SingleChoiceQuestionElements());
	}
	
	public ParserRule getSingleChoiceQuestionRule() {
		return getSingleChoiceQuestionAccess().getRule();
	}

	//MultiChoiceQuestion:
	//	optional?="optional"? "multi choice question" text=EString //	(optional?='optional')?
	//	("requires:" requires=Dependency)? "answers:" answers+=Answer answers+=Answer* "end question";
	public MultiChoiceQuestionElements getMultiChoiceQuestionAccess() {
		return (pMultiChoiceQuestion != null) ? pMultiChoiceQuestion : (pMultiChoiceQuestion = new MultiChoiceQuestionElements());
	}
	
	public ParserRule getMultiChoiceQuestionRule() {
		return getMultiChoiceQuestionAccess().getRule();
	}

	//CheckOr returns Dependency:
	//	CheckAnd ({Or.lhs=current} "or" rhs=CheckAnd)*;
	public CheckOrElements getCheckOrAccess() {
		return (pCheckOr != null) ? pCheckOr : (pCheckOr = new CheckOrElements());
	}
	
	public ParserRule getCheckOrRule() {
		return getCheckOrAccess().getRule();
	}

	//CheckAnd returns Dependency:
	//	CheckNot ({And.lhs=current} "and" rhs=CheckNot)*;
	public CheckAndElements getCheckAndAccess() {
		return (pCheckAnd != null) ? pCheckAnd : (pCheckAnd = new CheckAndElements());
	}
	
	public ParserRule getCheckAndRule() {
		return getCheckAndAccess().getRule();
	}

	//CheckNot returns Dependency:
	//	"not" Bottom {Not.dependency=current} | Bottom;
	public CheckNotElements getCheckNotAccess() {
		return (pCheckNot != null) ? pCheckNot : (pCheckNot = new CheckNotElements());
	}
	
	public ParserRule getCheckNotRule() {
		return getCheckNotAccess().getRule();
	}

	//Bottom returns Dependency:
	//	AnswerRef | "(" Dependency ")";
	public BottomElements getBottomAccess() {
		return (pBottom != null) ? pBottom : (pBottom = new BottomElements());
	}
	
	public ParserRule getBottomRule() {
		return getBottomAccess().getRule();
	}

	//AnswerRef:
	//	refers=[Answer|EString];
	public AnswerRefElements getAnswerRefAccess() {
		return (pAnswerRef != null) ? pAnswerRef : (pAnswerRef = new AnswerRefElements());
	}
	
	public ParserRule getAnswerRefRule() {
		return getAnswerRefAccess().getRule();
	}

	//ChoiceAnswer:
	//	"answer choice" name=ID ":" text=EString;
	public ChoiceAnswerElements getChoiceAnswerAccess() {
		return (pChoiceAnswer != null) ? pChoiceAnswer : (pChoiceAnswer = new ChoiceAnswerElements());
	}
	
	public ParserRule getChoiceAnswerRule() {
		return getChoiceAnswerAccess().getRule();
	}

	//FreetextAnswer:
	//	"answer text" name=ID ":" text=EString;
	public FreetextAnswerElements getFreetextAnswerAccess() {
		return (pFreetextAnswer != null) ? pFreetextAnswer : (pFreetextAnswer = new FreetextAnswerElements());
	}
	
	public ParserRule getFreetextAnswerRule() {
		return getFreetextAnswerAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
