/*
 * generated by Xtext
 */
package dk.itu.smdp.group19.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import surveymodel.Survey
import surveymodel.Page
import surveymodel.Question
import surveymodel.DescriptionPage
import surveymodel.QuestionPage
import surveymodel.SingleChoiceQuestion
import surveymodel.MultiChoiceQuestion
import surveymodel.FreetextQuestion
import surveymodel.impl.QuestionPageImpl
import surveymodel.FreetextAnswer
import surveymodel.Dependency
import surveymodel.Not
import surveymodel.And
import surveymodel.Or
import surveymodel.AnswerRef

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class SurveyDSLGenerator implements IGenerator {
	def static compileToXml(Survey it) {
		'''
			<Survey name="«title»">
				<pages>
					«FOR page : pages»
						<«page.eClass.name» name="«page.title»" text="«page.text»">
						«IF page.eClass.name == QuestionPage.simpleName» 
							«val questionPage = page as QuestionPage»
							«FOR question : questionPage.questions»
								<«question.eClass.name» name="«question.text»" optional="«question.optional»">
								«IF question.eClass.name == SingleChoiceQuestion.simpleName»
									«val singleQuestion = question as SingleChoiceQuestion»
									«FOR answer : singleQuestion.answers»
										<«answer.eClass.name» name="«answer.name»" text="«answer.text»"/>
									«ENDFOR»
								«ELSEIF question.eClass.name == MultiChoiceQuestion.simpleName»
									«val multiQuestion = question as MultiChoiceQuestion»
									«FOR answer : multiQuestion.answers»
										<«answer.eClass.name» name="«answer.name»" text="«answer.text»"/>
									«ENDFOR»
								«ELSEIF question.eClass.name == FreetextQuestion.simpleName»
									«val freeQuestion = question as FreetextQuestion»
									<«freeQuestion.answers.eClass.name» name="«freeQuestion.answers.name»" text="«freeQuestion.answers.text»"/>
								«ENDIF»
								
								«IF question.requires != null»
									<Requires>
									«compileDependencyToXml(question.requires)»
									</Requires>
								«ENDIF»
								</«question.eClass.name»>
							«ENDFOR»
						«ENDIF»
						</«page.eClass.name»>
					«ENDFOR»
				</pages>
			</Survey>
		'''
	}
	
	def static String compileDependencyToXml(Dependency it) {
		if (it == null)
			return ""
		
		'''
			«IF it.eClass.name == Not.simpleName»
				«val not = it as Not»
				<Not>
				«compileDependencyToXml(not.dependency)»
				</Not>
			«ELSEIF it.eClass.name == And.simpleName»
				«val and = it as And»
				<And>
				«compileDependencyToXml(and.lhs)»
				«compileDependencyToXml(and.rhs)»
				</And>
			«ELSEIF it.eClass.name == Or.simpleName»
				«val or = it as Or»
				<Or>
				«compileDependencyToXml(or.lhs)»
				«compileDependencyToXml(or.rhs)»
				</Or>
			«ELSEIF it.eClass.name == AnswerRef.simpleName»
				«val ref = it as AnswerRef»
				<AnswerRef name="«ref.refers.name»" />
			«ENDIF»
		'''
	}
	
	def static compileToTex(Survey it) {
		'''
			\documentclass[a4paper,final]{article}
			
			\usepackage{a4wide}
			\usepackage[english]{babel}
			\usepackage[utf8]{inputenc}
			\usepackage[T1]{fontenc}
			\usepackage{newtxtext,newtxmath}
			\usepackage{fancyhdr}
			
			\parindent = 0pt
			\setlength{\headheight}{15pt}
			\pagestyle{fancy}
			\chead{«it.title»}
			
			\begin{document}
			
			«FOR page : pages»
				\newpage
				\section*{«page.title»}
				«page.text»
				
				\vspace{15pt}
				
				«IF page.eClass.name == QuestionPage.simpleName» 
					«val questionPage = page as QuestionPage»
					«FOR question : questionPage.questions»
					«question.text»
					«IF question.optional»
						(optional)
					«ENDIF»
					«IF question.requires != null»
						(to answer this question, you must have answered «compileDependencyToTex(question.requires)»)
					«ENDIF»
						«IF question.eClass.name == SingleChoiceQuestion.simpleName»
							(select one)
							\begin{itemize}
							«val singleQuestion = question as SingleChoiceQuestion»
							«FOR answer : singleQuestion.answers»
								\item[$\bigcirc$] «answer.text»
								«IF answer.eClass.name == FreetextAnswer.simpleName»
									\\
									\fbox{
										\begin{minipage}{5in}
											\hfill \vspace{1in}
										\end{minipage}
									}
								«ENDIF»
							«ENDFOR»
							\end{itemize}
							
						«ELSEIF question.eClass.name == MultiChoiceQuestion.simpleName»
							(select one or several)
							\begin{itemize}
							«val multiQuestion = question as MultiChoiceQuestion»
							«FOR answer : multiQuestion.answers»
								\item[$\bigcirc$] «answer.text»
							«ENDFOR»
							\end{itemize}
							
						«ELSEIF question.eClass.name == FreetextQuestion.simpleName»
							«val freeQuestion = question as FreetextQuestion»
							\begin{itemize}
							\item[$\bigcirc$] «freeQuestion.answers.text»\\
							\fbox{
								\begin{minipage}{5in}
									\hfill \vspace{3in}
								\end{minipage}
							}
							\end{itemize}
							
						«ENDIF»
						\vspace{15pt}
						
					«ENDFOR»
				«ENDIF»
			«ENDFOR»
			
			\end{document}
		'''
	}
	
	def static String compileDependencyToTex(Dependency it) {
		if (it == null)
			return ""
		
		'''
			«IF it.eClass.name == Not.simpleName»
				«val not = it as Not»
				not «compileDependencyToTex(not.dependency)»
			«ELSEIF it.eClass.name == And.simpleName»
				«val and = it as And»
				«compileDependencyToTex(and.lhs)» and «compileDependencyToTex(and.rhs)»
			«ELSEIF it.eClass.name == Or.simpleName»
				«val or = it as Or»
				«compileDependencyToTex(or.lhs)» or «compileDependencyToTex(or.rhs)»
			«ELSEIF it.eClass.name == AnswerRef.simpleName»
				«val ref = it as AnswerRef»
				«ref.refers.text»
			«ENDIF»
		'''
	}
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		for(e: resource.allContents.toIterable.filter(Survey)) {
			fsa.generateFile("surveys/" + e.title.toString() + ".xml", e.compileToXml)
			
			val texFile = "surveys/" + e.title.toString + ".tex"
			fsa.generateFile(texFile, e.compileToTex)
			Runtime.runtime.exec("pdflatex " + texFile) // TODO: maybe this is not the correct path in relation to pdftex
		}
	}
}
