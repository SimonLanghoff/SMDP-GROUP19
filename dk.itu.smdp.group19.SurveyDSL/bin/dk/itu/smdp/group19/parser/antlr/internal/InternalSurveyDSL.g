/*
* generated by Xtext
*/
grammar InternalSurveyDSL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package dk.itu.smdp.group19.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package dk.itu.smdp.group19.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import dk.itu.smdp.group19.services.SurveyDSLGrammarAccess;

}

@parser::members {

 	private SurveyDSLGrammarAccess grammarAccess;
 	
    public InternalSurveyDSLParser(TokenStream input, SurveyDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Survey";	
   	}
   	
   	@Override
   	protected SurveyDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleSurvey
entryRuleSurvey returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSurveyRule()); }
	 iv_ruleSurvey=ruleSurvey 
	 { $current=$iv_ruleSurvey.current; } 
	 EOF 
;

// Rule Survey
ruleSurvey returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='start survey' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSurveyAccess().getStartSurveyKeyword_0());
    }
	otherlv_1='title:' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSurveyAccess().getTitleKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSurveyAccess().getTitleEStringParserRuleCall_2_0()); 
	    }
		lv_title_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSurveyRule());
	        }
       		set(
       			$current, 
       			"title",
        		lv_title_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='pages:' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSurveyAccess().getPagesKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSurveyAccess().getPagesPageParserRuleCall_4_0()); 
	    }
		lv_pages_4_0=rulePage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSurveyRule());
	        }
       		add(
       			$current, 
       			"pages",
        		lv_pages_4_0, 
        		"Page");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSurveyAccess().getPagesPageParserRuleCall_5_0()); 
	    }
		lv_pages_5_0=rulePage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSurveyRule());
	        }
       		add(
       			$current, 
       			"pages",
        		lv_pages_5_0, 
        		"Page");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_6='end survey' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSurveyAccess().getEndSurveyKeyword_6());
    }
)
;





// Entry rule entryRulePage
entryRulePage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPageRule()); }
	 iv_rulePage=rulePage 
	 { $current=$iv_rulePage.current; } 
	 EOF 
;

// Rule Page
rulePage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPageAccess().getQuestionPageParserRuleCall_0()); 
    }
    this_QuestionPage_0=ruleQuestionPage
    { 
        $current = $this_QuestionPage_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPageAccess().getDescriptionPageParserRuleCall_1()); 
    }
    this_DescriptionPage_1=ruleDescriptionPage
    { 
        $current = $this_DescriptionPage_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPageAccess().getResultPageParserRuleCall_2()); 
    }
    this_ResultPage_2=ruleResultPage
    { 
        $current = $this_ResultPage_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleQuestion
entryRuleQuestion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQuestionRule()); }
	 iv_ruleQuestion=ruleQuestion 
	 { $current=$iv_ruleQuestion.current; } 
	 EOF 
;

// Rule Question
ruleQuestion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQuestionAccess().getFreetextQuestionParserRuleCall_0()); 
    }
    this_FreetextQuestion_0=ruleFreetextQuestion
    { 
        $current = $this_FreetextQuestion_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getQuestionAccess().getSingleChoiceQuestionParserRuleCall_1()); 
    }
    this_SingleChoiceQuestion_1=ruleSingleChoiceQuestion
    { 
        $current = $this_SingleChoiceQuestion_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getQuestionAccess().getMultiChoiceQuestionParserRuleCall_2()); 
    }
    this_MultiChoiceQuestion_2=ruleMultiChoiceQuestion
    { 
        $current = $this_MultiChoiceQuestion_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleDependency
entryRuleDependency returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDependencyRule()); }
	 iv_ruleDependency=ruleDependency 
	 { $current=$iv_ruleDependency.current; } 
	 EOF 
;

// Rule Dependency
ruleDependency returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDependencyAccess().getAndParserRuleCall_0()); 
    }
    this_And_0=ruleAnd
    { 
        $current = $this_And_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDependencyAccess().getOrParserRuleCall_1()); 
    }
    this_Or_1=ruleOr
    { 
        $current = $this_Or_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDependencyAccess().getAnswerRefParserRuleCall_2()); 
    }
    this_AnswerRef_2=ruleAnswerRef
    { 
        $current = $this_AnswerRef_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAnswer
entryRuleAnswer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnswerRule()); }
	 iv_ruleAnswer=ruleAnswer 
	 { $current=$iv_ruleAnswer.current; } 
	 EOF 
;

// Rule Answer
ruleAnswer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAnswerAccess().getChoiceAnswerParserRuleCall_0()); 
    }
    this_ChoiceAnswer_0=ruleChoiceAnswer
    { 
        $current = $this_ChoiceAnswer_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAnswerAccess().getFreetextAnswerParserRuleCall_1()); 
    }
    this_FreetextAnswer_1=ruleFreetextAnswer
    { 
        $current = $this_FreetextAnswer_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleQuestionPage
entryRuleQuestionPage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQuestionPageRule()); }
	 iv_ruleQuestionPage=ruleQuestionPage 
	 { $current=$iv_ruleQuestionPage.current; } 
	 EOF 
;

// Rule QuestionPage
ruleQuestionPage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='add question page' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getQuestionPageAccess().getAddQuestionPageKeyword_0());
    }
	otherlv_1='title:' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getQuestionPageAccess().getTitleKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQuestionPageAccess().getTitleEStringParserRuleCall_2_0()); 
	    }
		lv_title_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuestionPageRule());
	        }
       		set(
       			$current, 
       			"title",
        		lv_title_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='text:' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getQuestionPageAccess().getTextKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQuestionPageAccess().getTextEStringParserRuleCall_3_1_0()); 
	    }
		lv_text_4_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuestionPageRule());
	        }
       		set(
       			$current, 
       			"text",
        		lv_text_4_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_5='questions:' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getQuestionPageAccess().getQuestionsKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQuestionPageAccess().getQuestionsQuestionParserRuleCall_5_0()); 
	    }
		lv_questions_6_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuestionPageRule());
	        }
       		add(
       			$current, 
       			"questions",
        		lv_questions_6_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getQuestionPageAccess().getQuestionsQuestionParserRuleCall_6_0()); 
	    }
		lv_questions_7_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuestionPageRule());
	        }
       		add(
       			$current, 
       			"questions",
        		lv_questions_7_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_8='end page' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getQuestionPageAccess().getEndPageKeyword_7());
    }
)
;





// Entry rule entryRuleDescriptionPage
entryRuleDescriptionPage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDescriptionPageRule()); }
	 iv_ruleDescriptionPage=ruleDescriptionPage 
	 { $current=$iv_ruleDescriptionPage.current; } 
	 EOF 
;

// Rule DescriptionPage
ruleDescriptionPage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='add description page' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDescriptionPageAccess().getAddDescriptionPageKeyword_0());
    }
	otherlv_1='title:' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDescriptionPageAccess().getTitleKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDescriptionPageAccess().getTitleEStringParserRuleCall_2_0()); 
	    }
		lv_title_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDescriptionPageRule());
	        }
       		set(
       			$current, 
       			"title",
        		lv_title_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='text:' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDescriptionPageAccess().getTextKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDescriptionPageAccess().getTextEStringParserRuleCall_3_1_0()); 
	    }
		lv_text_4_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDescriptionPageRule());
	        }
       		set(
       			$current, 
       			"text",
        		lv_text_4_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_5='end page' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDescriptionPageAccess().getEndPageKeyword_4());
    }
)
;





// Entry rule entryRuleResultPage
entryRuleResultPage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getResultPageRule()); }
	 iv_ruleResultPage=ruleResultPage 
	 { $current=$iv_ruleResultPage.current; } 
	 EOF 
;

// Rule ResultPage
ruleResultPage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='add result page' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getResultPageAccess().getAddResultPageKeyword_0());
    }
	otherlv_1='title:' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getResultPageAccess().getTitleKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getResultPageAccess().getTitleEStringParserRuleCall_2_0()); 
	    }
		lv_title_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getResultPageRule());
	        }
       		set(
       			$current, 
       			"title",
        		lv_title_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='text:' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getResultPageAccess().getTextKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getResultPageAccess().getTextEStringParserRuleCall_3_1_0()); 
	    }
		lv_text_4_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getResultPageRule());
	        }
       		set(
       			$current, 
       			"text",
        		lv_text_4_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_5='end page' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getResultPageAccess().getEndPageKeyword_4());
    }
)
;







// Entry rule entryRuleFreetextQuestion
entryRuleFreetextQuestion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFreetextQuestionRule()); }
	 iv_ruleFreetextQuestion=ruleFreetextQuestion 
	 { $current=$iv_ruleFreetextQuestion.current; } 
	 EOF 
;

// Rule FreetextQuestion
ruleFreetextQuestion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='add free text question' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFreetextQuestionAccess().getAddFreeTextQuestionKeyword_0());
    }
(
(
		lv_optional_1_0=	'optional' 
    {
        newLeafNode(lv_optional_1_0, grammarAccess.getFreetextQuestionAccess().getOptionalOptionalKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFreetextQuestionRule());
	        }
       		setWithLastConsumed($current, "optional", true, "optional");
	    }

)
)?	otherlv_2='text:' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFreetextQuestionAccess().getTextKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFreetextQuestionAccess().getTextEStringParserRuleCall_3_0()); 
	    }
		lv_text_3_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFreetextQuestionRule());
	        }
       		set(
       			$current, 
       			"text",
        		lv_text_3_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4='requires:' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFreetextQuestionAccess().getRequiresKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFreetextQuestionAccess().getRequiresDependencyParserRuleCall_4_1_0()); 
	    }
		lv_requires_5_0=ruleDependency		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFreetextQuestionRule());
	        }
       		set(
       			$current, 
       			"requires",
        		lv_requires_5_0, 
        		"Dependency");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_6='answers:' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFreetextQuestionAccess().getAnswersKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFreetextQuestionAccess().getAnswersFreetextAnswerParserRuleCall_6_0()); 
	    }
		lv_answers_7_0=ruleFreetextAnswer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFreetextQuestionRule());
	        }
       		set(
       			$current, 
       			"answers",
        		lv_answers_7_0, 
        		"FreetextAnswer");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8='end question' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getFreetextQuestionAccess().getEndQuestionKeyword_7());
    }
)
;





// Entry rule entryRuleSingleChoiceQuestion
entryRuleSingleChoiceQuestion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSingleChoiceQuestionRule()); }
	 iv_ruleSingleChoiceQuestion=ruleSingleChoiceQuestion 
	 { $current=$iv_ruleSingleChoiceQuestion.current; } 
	 EOF 
;

// Rule SingleChoiceQuestion
ruleSingleChoiceQuestion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='add single choice question' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSingleChoiceQuestionAccess().getAddSingleChoiceQuestionKeyword_0());
    }
(
(
		lv_optional_1_0=	'optional' 
    {
        newLeafNode(lv_optional_1_0, grammarAccess.getSingleChoiceQuestionAccess().getOptionalOptionalKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSingleChoiceQuestionRule());
	        }
       		setWithLastConsumed($current, "optional", true, "optional");
	    }

)
)?	otherlv_2='text:' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSingleChoiceQuestionAccess().getTextKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSingleChoiceQuestionAccess().getTextEStringParserRuleCall_3_0()); 
	    }
		lv_text_3_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleChoiceQuestionRule());
	        }
       		set(
       			$current, 
       			"text",
        		lv_text_3_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4='requires:' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSingleChoiceQuestionAccess().getRequiresKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSingleChoiceQuestionAccess().getRequiresDependencyParserRuleCall_4_1_0()); 
	    }
		lv_requires_5_0=ruleDependency		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleChoiceQuestionRule());
	        }
       		set(
       			$current, 
       			"requires",
        		lv_requires_5_0, 
        		"Dependency");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_6='answers:' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSingleChoiceQuestionAccess().getAnswersKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSingleChoiceQuestionAccess().getAnswersAnswerParserRuleCall_6_0()); 
	    }
		lv_answers_7_0=ruleAnswer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleChoiceQuestionRule());
	        }
       		add(
       			$current, 
       			"answers",
        		lv_answers_7_0, 
        		"Answer");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSingleChoiceQuestionAccess().getAnswersAnswerParserRuleCall_7_0()); 
	    }
		lv_answers_8_0=ruleAnswer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleChoiceQuestionRule());
	        }
       		add(
       			$current, 
       			"answers",
        		lv_answers_8_0, 
        		"Answer");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_9='end question' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getSingleChoiceQuestionAccess().getEndQuestionKeyword_8());
    }
)
;





// Entry rule entryRuleMultiChoiceQuestion
entryRuleMultiChoiceQuestion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiChoiceQuestionRule()); }
	 iv_ruleMultiChoiceQuestion=ruleMultiChoiceQuestion 
	 { $current=$iv_ruleMultiChoiceQuestion.current; } 
	 EOF 
;

// Rule MultiChoiceQuestion
ruleMultiChoiceQuestion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='add multi choice question' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMultiChoiceQuestionAccess().getAddMultiChoiceQuestionKeyword_0());
    }
(
(
		lv_optional_1_0=	'optional' 
    {
        newLeafNode(lv_optional_1_0, grammarAccess.getMultiChoiceQuestionAccess().getOptionalOptionalKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiChoiceQuestionRule());
	        }
       		setWithLastConsumed($current, "optional", true, "optional");
	    }

)
)?	otherlv_2='text:' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMultiChoiceQuestionAccess().getTextKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiChoiceQuestionAccess().getTextEStringParserRuleCall_3_0()); 
	    }
		lv_text_3_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiChoiceQuestionRule());
	        }
       		set(
       			$current, 
       			"text",
        		lv_text_3_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4='requires:' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMultiChoiceQuestionAccess().getRequiresKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiChoiceQuestionAccess().getRequiresDependencyParserRuleCall_4_1_0()); 
	    }
		lv_requires_5_0=ruleDependency		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiChoiceQuestionRule());
	        }
       		set(
       			$current, 
       			"requires",
        		lv_requires_5_0, 
        		"Dependency");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_6='answers:' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMultiChoiceQuestionAccess().getAnswersKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiChoiceQuestionAccess().getAnswersAnswerParserRuleCall_6_0()); 
	    }
		lv_answers_7_0=ruleAnswer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiChoiceQuestionRule());
	        }
       		add(
       			$current, 
       			"answers",
        		lv_answers_7_0, 
        		"Answer");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiChoiceQuestionAccess().getAnswersAnswerParserRuleCall_7_0()); 
	    }
		lv_answers_8_0=ruleAnswer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiChoiceQuestionRule());
	        }
       		add(
       			$current, 
       			"answers",
        		lv_answers_8_0, 
        		"Answer");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_9='end question' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getMultiChoiceQuestionAccess().getEndQuestionKeyword_8());
    }
)
;





// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	 iv_ruleAnd=ruleAnd 
	 { $current=$iv_ruleAnd.current; } 
	 EOF 
;

// Rule And
ruleAnd returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='and(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAndAccess().getAndKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAndAccess().getLhsDependencyParserRuleCall_1_0()); 
	    }
		lv_lhs_1_0=ruleDependency		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndRule());
	        }
       		set(
       			$current, 
       			"lhs",
        		lv_lhs_1_0, 
        		"Dependency");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='and' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAndAccess().getAndKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAndAccess().getRhsDependencyParserRuleCall_3_0()); 
	    }
		lv_rhs_3_0=ruleDependency		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_3_0, 
        		"Dependency");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAndAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleOr
entryRuleOr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrRule()); }
	 iv_ruleOr=ruleOr 
	 { $current=$iv_ruleOr.current; } 
	 EOF 
;

// Rule Or
ruleOr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='or(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOrAccess().getOrKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrAccess().getLhsDependencyParserRuleCall_1_0()); 
	    }
		lv_lhs_1_0=ruleDependency		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrRule());
	        }
       		set(
       			$current, 
       			"lhs",
        		lv_lhs_1_0, 
        		"Dependency");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='or' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOrAccess().getOrKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrAccess().getRhsDependencyParserRuleCall_3_0()); 
	    }
		lv_rhs_3_0=ruleDependency		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_3_0, 
        		"Dependency");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getOrAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleAnswerRef
entryRuleAnswerRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnswerRefRule()); }
	 iv_ruleAnswerRef=ruleAnswerRef 
	 { $current=$iv_ruleAnswerRef.current; } 
	 EOF 
;

// Rule AnswerRef
ruleAnswerRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='answer reference:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAnswerRefAccess().getAnswerReferenceKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnswerRefRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getAnswerRefAccess().getRefersAnswerCrossReference_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleChoiceAnswer
entryRuleChoiceAnswer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChoiceAnswerRule()); }
	 iv_ruleChoiceAnswer=ruleChoiceAnswer 
	 { $current=$iv_ruleChoiceAnswer.current; } 
	 EOF 
;

// Rule ChoiceAnswer
ruleChoiceAnswer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='add answer choice' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getChoiceAnswerAccess().getAddAnswerChoiceKeyword_0());
    }
	otherlv_1='name:' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getChoiceAnswerAccess().getNameKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getChoiceAnswerAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getChoiceAnswerRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='text:' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getChoiceAnswerAccess().getTextKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChoiceAnswerAccess().getTextEStringParserRuleCall_4_0()); 
	    }
		lv_text_4_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChoiceAnswerRule());
	        }
       		set(
       			$current, 
       			"text",
        		lv_text_4_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFreetextAnswer
entryRuleFreetextAnswer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFreetextAnswerRule()); }
	 iv_ruleFreetextAnswer=ruleFreetextAnswer 
	 { $current=$iv_ruleFreetextAnswer.current; } 
	 EOF 
;

// Rule FreetextAnswer
ruleFreetextAnswer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='add answer text' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFreetextAnswerAccess().getAddAnswerTextKeyword_0());
    }
	otherlv_1='name:' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFreetextAnswerAccess().getNameKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getFreetextAnswerAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFreetextAnswerRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='text:' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFreetextAnswerAccess().getTextKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFreetextAnswerAccess().getTextEStringParserRuleCall_4_0()); 
	    }
		lv_text_4_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFreetextAnswerRule());
	        }
       		set(
       			$current, 
       			"text",
        		lv_text_4_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


